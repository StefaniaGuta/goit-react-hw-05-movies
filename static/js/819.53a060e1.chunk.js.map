{"version":3,"file":"static/js/819.53a060e1.chunk.js","mappings":"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","sources":["components/Recommendations/Recommendations.jsx","components/Home/Home.jsx"],"sourcesContent":["import {moviesRecommendations, IMAGE_URL} from '../../redux/movies/getAPI';\nimport {seriesRecommendations} from '../../redux/series/seriesApi';\nimport { useDispatch } from 'react-redux';\nimport { useState, useCallback  } from 'react';\n//import { useQuery } from '@tanstack/react-query';\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Recommendations.css';\n\nconst Recommendations = () => {\n  const dispatch = useDispatch();\n  const [recommMovies, setRecommMovie] = useState([]);\n  const [recommSeries, setRecommSeries] = useState([]);\n  const [activeTab, setActiveTab] = useState(null);\n\n  const getMovies = async () => {\n    const res = await dispatch(moviesRecommendations());\n    setRecommMovie(res.payload.results);\n    setActiveTab(\"movies\");\n  };\n\n  \n  const getSeries = useCallback(async () => {\n    try {\n      const res = await dispatch(seriesRecommendations());\n      setRecommSeries(res.payload?.results || []);\n      setActiveTab(\"series\");\n    } catch (err) {\n      console.error(\"Error fetching series recommendations\", err);\n    }\n  }, [dispatch]);\n\n useEffect(() => {\n    getSeries()\n }, [getSeries])\n\n  return (\n    <section className='RecommendationSection'>\n      <div className='title_filters'>\n        <h2 className='sectionTitle'>Recommended</h2>\n        <button type=\"button\" onClick={getMovies}>\n          Movies\n        </button>\n        <button type=\"button\" onClick={getSeries}>\n          Series\n        </button>\n      </div>\n\n      <ul className='recommendationList'>\n        {activeTab === \"movies\" &&\n          recommMovies\n          .filter(m => m.poster_path)\n          .map((m) => (\n            <li key={m.id}>\n            <Link className=\"Item\" to={`/movie/${m.id}`}>\n              <img\n                src={IMAGE_URL + m.poster_path}\n                alt={m.title || m.name}\n              />\n              <h2 className='movieTitle'>{m.title || m.name}</h2>\n            </Link>\n            </li>\n          ))}\n\n        {\n        activeTab === \"series\" &&\n          recommSeries\n          .filter(s => s.poster_path)\n          .map((s) => (\n            <li key={s.id}>\n              <Link className=\"Item\" to={`/tv/${s.id}`}>\n                <img\n                  src={IMAGE_URL + s.poster_path}\n                  alt={s.title || s.name}\n                />\n                <div className='titleSection'>\n                  <h2 className='movieTitle'>{s.title || s.name}</h2>\n                </div>\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </section >\n  );\n};\n\n\n\nexport default Recommendations;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useNavigate } from 'react-router-dom';\nimport {  IMAGE_URL,  theNewRealedMovie, getMovieDetails } from '../../redux/movies/getAPI';\nimport { newSeriesFetch } from '../../redux/series/seriesApi';\nimport {useDispatch, useSelector} from 'react-redux';\nimport Recommendations from '../Recommendations/Recommendations';\nimport url from '../Images/icons.svg'\nimport './Home.css';\n\nconst Home = () => {\n  const [series, setSeries] = useState([]);\n  const [releasedMovie, setReleasedMovie] = useState([]);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const recentMovies = useSelector(state => state?.movies.recentMovies.results) || [];\n\n  useEffect(() => { \n    const newReleasedMovies = async () => {\n      try{\n        const response = await dispatch(theNewRealedMovie());\n        const allMovies = response.payload.results;\n        \n        const detailsArray = [];\n        for (const m of allMovies) {\n          const detailsResponse = await dispatch(getMovieDetails(m.id));\n          detailsArray.push(detailsResponse.payload);\n        }\n        setReleasedMovie(detailsArray)\n      } catch(e) {\n        console.log(e)\n      }\n    }\n    newReleasedMovies();\n  }, [dispatch]);\nconst formatRuntime = (minutes) => {\n    if (!minutes || minutes <= 0) return \"N/A\";\n    const h = Math.floor(minutes / 60);\n    const m = minutes % 60;\n    return `${h}h ${m}m`;\n  };\n  useEffect(() => {\n    const fetchSeries = async () => {\n      const res = await dispatch(newSeriesFetch());\n      setSeries(res.payload)\n    }\n    fetchSeries();\n  }, [dispatch])\n\n  const handlerNavigate = (type) => {\n    navigate(`/movies/${type}`, { state: { type } });\n  };\n\n  const navigateToSeriesPage = (seriesType) => {\n    navigate(`/series/${seriesType}`, { state: { seriesType } });\n  }\n\n  return (\n    <section className=\"homeSection\">\n      <div className=\"recentlyUpdatesContainer\">\n        <h2 className='sectionTitle'>Recently Updated</h2>\n        <ul className='recentryMoviesList'>\n        {recentMovies ? (recentMovies.filter(m => m.poster_path)\n        .sort((a, b) => b.release_date - a.release_date)\n        .slice(0, 5)\n        .map(movie => (\n          <>\n          <li key={movie.id}>\n            <Link className=\"recentMovie\" to={`/movie/${movie.id}`}>\n              <img\n                src={IMAGE_URL + movie.poster_path}\n                alt={movie.title || movie.name}\n              />\n              <div>\n                <h2 className='movieTitle'>{movie.title || movie.name}</h2>\n              </div>\n            </Link>\n          </li>\n          \n          </>\n        )) ) : (<p>no</p>)}\n        <button onClick={() => handlerNavigate(\"popular\")} className='recentMovieButton' type='button'>&#10230;</button>\n      </ul>\n      </div>\n\n      <div className='newReleasedContainer'>\n        <span className='title_viewAll'>\n          <h2 className='sectionTitle'>New Release - Movies</h2>\n          <button onClick={() => handlerNavigate(\"newReleaseMovie\")}>View all &#10230;</button>\n        </span>\n        <ul className='newReleasedList'>\n          {releasedMovie.filter(m => m.poster_path)\n          .sort((a, b) => b.vote_average - a.vote_average)\n          .slice(0, 4)\n          .map(movie => (\n            <>\n            <li key={movie.id}>\n              <Link className=\"newReleasedItem\" to={`/movie/${movie.id}`}>\n                <img\n                  src={IMAGE_URL + movie.poster_path}\n                  alt={movie.title || movie.name}\n                />\n                <div className='runtime_vote'>\n                  <span style={{alignItems: \"end\"}}>\n                    <svg><use xlinkHref={`${url}#clock`}/></svg>\n                    {formatRuntime(movie.runtime)}\n                  </span>\n                  <span style={{alignItems: \"center\"}}>\n                    <svg><use xlinkHref={`${url}#star`}/></svg>\n                    {movie.vote_average.toFixed(1)}\n                  </span>\n                </div>\n                <div className='titleSection'>\n                  <h2 className='movieTitle'>{movie.title || movie.name}</h2>\n                  <ul>\n                    {movie.genres\n                    .slice(0, 1)\n                    .map(gen => (\n                      <li className='movieGenre' key={gen.id}>{gen.name}</li>\n                    ))}\n                  </ul>\n                </div>\n              </Link>\n            </li>\n            </>\n          ))}\n        </ul>\n      </div>    \n      \n      <div className='newReleasedContainer'>\n          <span className='title_viewAll'>\n            <h2 className='sectionTitle'>New Release - Series</h2>\n            <button onClick={() => navigateToSeriesPage(\"newReleaseSeries\")}>View all &#10230;</button>\n        </span>\n        <ul className='newReleasedList'>\n          {series.filter(m => m.poster_path)\n          .sort((a, b) => b.popularity - a.popularity)\n          .slice(0, 4)\n          .map(s => (\n            <>\n            <li key={s.id}>\n              <Link className=\"newReleasedItem\" to={`/tv/${s.id}`}>\n                <img\n                  src={IMAGE_URL + s.poster_path}\n                  alt={s.title || s.name}\n                />\n                <span className='epNumber'>Ep. {s.last_episode_to_air.episode_number}</span>\n                <div className='titleSection'>\n                  <h2 className='movieTitle'>{s.title || s.name}</h2>\n                  <p className='seasonNumber'>Season {s.last_episode_to_air.season_number}</p>\n                </div>\n              </Link>\n            </li>\n            </>\n          ))}\n        </ul>\n      </div>\n\n      <div className='RecommendationContainer'>\n        <button className='viewAll'>View all &#10230;</button>\n        <Recommendations/>\n      </div>\n    </section>\n  );\n};\n\nHome.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      backdrop_path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Home;"],"names":["dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","recommMovies","setRecommMovie","_useState3","_useState4","recommSeries","setRecommSeries","_useState5","_useState6","activeTab","setActiveTab","getMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","res","_context","prev","next","moviesRecommendations","sent","payload","results","stop","apply","arguments","getSeries","useCallback","_callee2","_res$payload","_context2","seriesRecommendations","t0","console","error","useEffect","_jsxs","className","children","_jsx","type","onClick","filter","m","poster_path","map","Link","to","concat","id","src","IMAGE_URL","alt","title","name","s","series","setSeries","releasedMovie","setReleasedMovie","navigate","useNavigate","recentMovies","useSelector","state","movies","newReleasedMovies","response","allMovies","detailsArray","_iterator","_step","detailsResponse","theNewRealedMovie","_createForOfIteratorHelper","n","done","value","getMovieDetails","push","e","f","finish","t1","log","formatRuntime","minutes","h","Math","floor","fetchSeries","_ref2","newSeriesFetch","handlerNavigate","sort","a","b","release_date","slice","movie","_Fragment","vote_average","style","alignItems","xlinkHref","url","runtime","toFixed","genres","gen","seriesType","popularity","last_episode_to_air","episode_number","season_number","Recommendations"],"sourceRoot":""}