{"version":3,"file":"static/js/975.8f359531.chunk.js","mappings":"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","sources":["components/SphereScroll/SphereScroll.jsx","components/Trailer/Trailer.jsx","components/MainPoster/MainPoster.jsx","components/MainPage/MainPage.jsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { IMAGE_URL } from \"../../redux/movies/getAPI\";\nimport \"./SphereScroll.css\"\n\nconst SphereScroll = ({ movies }) => {\n  const listRef = useRef();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const list = listRef.current;\n      if (!list) return;\n\n      const items = list.querySelectorAll(\"li\");\n\n      items.forEach((item) => {\n        const rect = item.getBoundingClientRect();\n        const itemCenter = rect.left + rect.width / 2;\n        const offset = (itemCenter - window.innerWidth / 2) / window.innerWidth;\n\n        item.style.transform = `\n          rotateY(${offset * 40}deg)\n          scale(${1 - Math.abs(offset) * 0.3})\n        `;\n        item.style.opacity = `${1 - Math.abs(offset) * 0.6}`;\n      });\n    };\n\n    const list = listRef.current;\n    list.addEventListener(\"scroll\", handleScroll);\n    handleScroll();\n\n    return () => list.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return (\n    <ul ref={listRef} className=\"movieList\">\n      {movies.map((m) => (\n        <li key={m.id}>\n          <img\n            className=\"imgCover\"\n            src={IMAGE_URL + m.poster_path}\n            alt={m.title || m.name}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default SphereScroll;\n","import { useEffect, useState, useRef, } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getTrailer } from \"../../redux/movies/getAPI\";\nimport './Trailer.css';\n\nconst Trailers = ( movieId ) => {\n  const dispatch = useDispatch();\n  const [trailers, setTrailers] = useState([]);\n  const [open, setOpen] = useState(null);\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    const loadTrailers = async () => {\n      try {\n        const res = await dispatch(getTrailer({show: \"tv\", id: movieId.id.id}));\n        \n        const filtered = res.payload.results.filter(\n          (v) => v.site === \"YouTube\" && v.type === \"Teaser\"\n        );\n        setTrailers(filtered);\n      } catch (e) {\n        console.error(\"Eroare la încărcarea trailerelor:\", e);\n      }\n    };\n\n    if (movieId) loadTrailers();\n\n    const handleClickOutside = (e) => {\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\n        setOpen(false);\n      }\n    };\n    if (open) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [dispatch, movieId, open]);\n\n  if (!trailers.length) return null;\n\nconst handleOpen = () => setOpen(!open)\n\n  return (\n    <div className=\"trailers\">\n       <button onClick={handleOpen} type=\"button\">Watch Later</button>\n       {open ? \n       <>\n       {trailers.map((trailer) => (\n         <div ref={modalRef} key={trailer.id} className=\"trailer-item\">\n           <h4>{trailer.name}</h4>\n           <iframe\n             width=\"960\"\n             height=\"509\"\n             src={`https://www.youtube.com/embed/${trailer.key}`}\n             title={trailer.name}\n             allowFullScreen\n           ></iframe>\n         </div>\n       ))}\n       </>\n       : null}\n        \n    </div>\n  );\n};\n\nexport default Trailers;\n","import { useEffect, useState} from \"react\";\nimport {  newSeriesFetch } from \"../../redux/series/seriesApi\";\nimport { useDispatch } from \"react-redux\";\n//import star from '../../components/Images/star.png';\n//import calendar from '../../components/Images/calendar.png';\nimport { useNavigate } from \"react-router-dom\";\nimport Trailers from \"components/Trailer/Trailer\";\nimport url from '../Images/icons.svg';\nimport \"./MainPoster.css\";\n\nconst MainPoster = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [main, setMain] = useState([]);\n  const [highlight, setHighlight] = useState(null);\n  const [index, setIndex] = useState(0);\n\n \n  useEffect(() => {\n    const fetchSeries = async () => {\n      const ser = await dispatch(newSeriesFetch());\n      if (ser?.payload?.length) {\n        setMain(ser.payload.filter(s =>s.backdrop_path));\n        setHighlight(ser.payload[0]);\n      }\n    };\n    fetchSeries();\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!main.length) return;\n\n    const interval = setInterval(() => {\n      setIndex((prev) => {\n        const newIndex = (prev + 1) % main.length;\n        setHighlight(main[newIndex]);\n        return newIndex;\n      });\n    }, 8000);\n\n    return () => clearInterval(interval);\n  }, [main]);\n\n  console.log(index)\n\n  return (\n    <section className=\"mainPosterSection\">\n      {highlight ? (\n        <div className=\"imageWrapper\">\n          <img\n            className=\"mainImgCover\"\n            src={\n              \"https://image.tmdb.org/t/p/w1920_and_h800_multi_faces\" +\n              highlight.backdrop_path\n            }\n            alt={highlight.name}\n          />\n          <div className=\"movieInfos\">\n            <div className=\"movieButtons\">\n              <button type=\"button\" onClick={() => navigate(`/login`)}>\n                Watch now\n              </button>\n              <Trailers id={highlight} />\n            </div>\n            <div className=\"infos\">\n              <h1 className=\"movieTitle\">{highlight.name}</h1>\n              <div className=\"gen_rating_time\">\n                <ul className=\"movieGen\">\n                  {highlight.genres.slice(0, 2).map(g => (\n                    <li key={g.id}>{g.name}</li>\n                  ))}\n                </ul>\n                <span className=\"rating\">\n                  <svg width=\"14\" height=\"14\"><use xlinkHref={`${url}#star`}/></svg>\n                  {highlight.vote_average?.toFixed(1)}\n                </span>\n                <span>\n                  <svg width=\"20\" height=\"20\"><use xlinkHref={`${url}#calendar`}/></svg>\n                  {new Date(highlight.first_air_date).getFullYear()}\n                </span>\n              </div>\n              <p className=\"movieOverview\">{highlight.overview}</p>\n              <ul className=\"movieSeasons\">\n                {highlight.seasons?.slice(0, 3).map((s) => (\n                  <li key={s.id}>{s.name}</li>\n                ))}\n                {highlight.seasons.length > 3 ? <li className=\"moSeasonsBtn\">More Seasons</li> : null}\n              </ul>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"imageWrapper\"></div>\n      )}\n    </section>\n  );\n};\n\nexport default MainPoster;","import { useEffect, useState, useRef } from \"react\";\nimport { getAll, getTrendingAll, day, getGenres, popularActors, IMAGE_URL } from \"../../redux/movies/getAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport SphereScroll from \"components/SphereScroll/SphereScroll\";\nimport url from '../Images/icons.svg';\nimport MainPoster from \"components/MainPoster/MainPoster\";\nimport noImg from '../Images/no_image.jpg';\nimport \"./MainPage.css\";\n\nconst MainPage = () => {\n  const dispatch = useDispatch();\n  const [recentMovie, setRecentMovie] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [trending, setTrending] = useState([]);\n  const ref = useRef(null);\n  const [scrollAmount, setScrollAmount] = useState(0);\n\n useEffect(() => {\n  const fetchMostRecentMovie = async () => {\n    try {\n      const response = await dispatch(getTrendingAll(day));\n      const moviesFiltered = response.payload.results.filter(m => m.poster_path);\n      setRecentMovie(moviesFiltered);\n\n     \n      \n    } catch (e) {\n      console.error(\"Eroare la fetch:\", e);\n    }\n  };\n\n  const fetchGenres = async () => {\n    try{\n      const res = await dispatch(getGenres());\n      setGenres(res.payload.genres)\n    } catch(e) {\n      console.log(e)\n    }\n  }\n  const fetchActors = async () => {\n    try{\n      const res = await dispatch(popularActors());\n      setActors(res.payload.results)\n    } catch(e) {\n      console.log(e)\n    }\n  }\n  const fetchTrending = async () => {\n    const response = await dispatch(getAll())\n    const sorted = response.payload.results\n      .filter(m => m.poster_path || m.backdrop_path)\n      .sort((a, b) => b.vote_average - a.vote_average)\n      .slice(0, 3);\n    \n    setTrending(sorted);\n  }\nconst updateScrollAmount = () => {\n      const width = window.innerWidth;\n      setScrollAmount(Math.floor(width));\n    };\n\n    updateScrollAmount();\n    window.addEventListener(\"resize\", updateScrollAmount);\n    fetchMostRecentMovie();\n    fetchGenres();\n    fetchActors();\n    fetchTrending();\n    return () => window.removeEventListener(\"resize\", updateScrollAmount);\n}, [dispatch]);\n\nconst scroll = (dir) => {\n    if (!ref.current) return;\n    ref.current.scrollBy({\n      left: dir === \"left\" ? -scrollAmount : scrollAmount,\n      behavior: \"smooth\",\n    });\n  };\n\n  return (\n    <section className=\"mainSection\">\n       <MainPoster/>\n      <div className=\"genresSection\">\n        <div>\n          <h2 className=\"sectionTitle\">choose the type of film you liked</h2>\n          <p className=\"sectionText\">We present many films from various main categories, let's chooose and search film of you liked</p>\n        </div>\n        <ul className=\"genresList\">\n          {genres\n          .map(gen => (\n            <li key={gen.id}>\n              <svg width=\"29\" height=\"32\"><use xlinkHref={`${url}#${gen.name}`}/></svg>\n              <span>\n                {gen.name}\n                <Link to={`/genres/${gen.name}/${gen.id}`} >View more</Link>\n              </span>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"devicesSection\">\n        <h2 className=\"title\">Any time, Anywhere</h2>\n        <p className=\"text\">Watch your favorite movie or TV series on all types of devices<br></br>\n          Stream and enjoy your favorites on your device\n        </p>\n        <ul className=\"devicesList\">\n          <li>\n            <svg width=\"60\" height=\"60\"><use xlinkHref={`${url}#TV`}/></svg>\n            TV\n          </li>\n          <li>\n            <svg width=\"60\" height=\"60\"><use xlinkHref={`${url}#laptop`}/></svg>\n            Laptop & Desktop\n          </li>\n          <li>\n            <svg width=\"60\" height=\"60\"><use xlinkHref={`${url}#mobil`}/></svg>\n            Tablet & Mobil\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"popularCelebritiesSection\">\n        <h2>Most popular celebrities</h2>\n        <div className=\"moveBtn\">\n          <button type=\"button\" onClick={() => scroll(\"left\")}>\n            &lsaquo;\n          </button>\n          <button type=\"button\" onClick={() => scroll(\"right\")}>\n            &rsaquo;\n          </button>\n        </div>\n        <ul className=\"actorsList\" ref={ref}>\n          {actors.map(a => (\n            <li key={a.id}>\n              <img src={a.profile_path ? IMAGE_URL + a.profile_path : noImg} alt={a.name}/>\n              <h3>{a.name}</h3>\n              <p>{a.known_for_department}</p>\n            </li>\n          ))}\n        </ul>\n      </div>    \n\n      <div className=\"trendingSection\">\n        <h2>Top 3 the most wanted movies this week</h2>\n        <ul className=\"trendingList\">\n          {trending \n            .map(t => (\n              <li key={t.id} className=\"recentMovie\">\n                <svg viewBox=\"0 0 300 150\" className=\"titleArc\">\n                  <defs>\n                    <path id={`arcPath-${t.id}`} d=\"M 20 130 A 130 130 0 0 1 280 130\" />\n                  </defs>\n                  <text fill=\"white\" fontSize=\"16\" fontWeight=\"bold\">\n                    <textPath href={`#arcPath-${t.id}`} startOffset=\"50%\" textAnchor=\"middle\">\n                      {t.title || t.name}\n                    </textPath>\n                  </text>\n                </svg>\n                <img\n                  src={IMAGE_URL + t.poster_path || t.backdrop_path\n                  }\n                  alt={t.title || t.name}\n                />\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n\n      <div className=\"isPopularSection\">\n        <h2>What's Popular</h2> \n        <SphereScroll  movies={recentMovie}/>\n      </div>\n\n    </section>\n  );\n};\n\nexport default MainPage;"],"names":["_ref","movies","listRef","useRef","useEffect","handleScroll","list","current","querySelectorAll","forEach","item","rect","getBoundingClientRect","offset","left","width","window","innerWidth","style","transform","concat","Math","abs","opacity","addEventListener","removeEventListener","_jsx","ref","className","children","map","m","src","IMAGE_URL","poster_path","alt","title","name","id","movieId","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","trailers","setTrailers","_useState3","_useState4","open","setOpen","modalRef","loadTrailers","_asyncToGenerator","_regeneratorRuntime","_callee","res","filtered","_context","prev","next","getTrailer","show","sent","payload","results","filter","v","site","type","t0","console","error","stop","apply","arguments","handleClickOutside","e","contains","target","document","length","_jsxs","onClick","_Fragment","trailer","height","key","allowFullScreen","_highlight$vote_avera","_highlight$seasons","navigate","useNavigate","main","setMain","highlight","setHighlight","_useState5","_useState6","index","setIndex","fetchSeries","_ser$payload","ser","newSeriesFetch","s","backdrop_path","interval","setInterval","newIndex","clearInterval","log","Trailers","genres","slice","g","xlinkHref","url","vote_average","toFixed","Date","first_air_date","getFullYear","overview","seasons","recentMovie","setRecentMovie","setGenres","actors","setActors","_useState7","_useState8","trending","setTrending","_useState9","_useState10","scrollAmount","setScrollAmount","fetchMostRecentMovie","response","moviesFiltered","getTrendingAll","day","fetchGenres","_ref2","_callee2","_context2","getGenres","fetchActors","_ref3","_callee3","_context3","popularActors","fetchTrending","_ref4","_callee4","sorted","_context4","getAll","sort","a","b","updateScrollAmount","floor","scroll","dir","scrollBy","behavior","MainPoster","gen","Link","to","profile_path","noImg","known_for_department","t","viewBox","d","fill","fontSize","fontWeight","href","startOffset","textAnchor","SphereScroll"],"sourceRoot":""}