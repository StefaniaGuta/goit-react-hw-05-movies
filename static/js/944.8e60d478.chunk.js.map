{"version":3,"file":"static/js/944.8e60d478.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js","../node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js","../node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js","../node_modules/@tanstack/query-core/src/subscribable.ts","../node_modules/@tanstack/query-core/src/timeoutManager.ts","../node_modules/@tanstack/query-core/src/utils.ts","../node_modules/@tanstack/query-core/src/focusManager.ts","../node_modules/@tanstack/query-core/src/notifyManager.ts","../node_modules/@tanstack/query-core/src/onlineManager.ts","../node_modules/@tanstack/query-core/src/thenable.ts","../node_modules/@tanstack/query-core/src/retryer.ts","../node_modules/@tanstack/query-core/src/removable.ts","../node_modules/@tanstack/query-core/src/query.ts","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/QueryClientProvider.tsx","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/IsRestoringProvider.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../node_modules/@tanstack/react-query/src/useQuery.ts"],"sourcesContent":["export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateFieldInitSpec(obj, privateMap, value) {\n  checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return fn;\n}","export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n}","export class Subscribable<TListener extends Function> {\n  protected listeners = new Set<TListener>()\n\n  constructor() {\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.add(listener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","/**\n * {@link TimeoutManager} does not support passing arguments to the callback.\n *\n * `(_: void)` is the argument type inferred by TypeScript's default typings for\n * `setTimeout(cb, number)`.\n * If we don't accept a single void argument, then\n * `new Promise(resolve => timeoutManager.setTimeout(resolve, N))` is a type error.\n */\nexport type TimeoutCallback = (_: void) => void\n\n/**\n * Wrapping `setTimeout` is awkward from a typing perspective because platform\n * typings may extend the return type of `setTimeout`. For example, NodeJS\n * typings add `NodeJS.Timeout`; but a non-default `timeoutManager` may not be\n * able to return such a type.\n */\nexport type ManagedTimerId = number | { [Symbol.toPrimitive]: () => number }\n\n/**\n * Backend for timer functions.\n */\nexport type TimeoutProvider<TTimerId extends ManagedTimerId = ManagedTimerId> =\n  {\n    readonly setTimeout: (callback: TimeoutCallback, delay: number) => TTimerId\n    readonly clearTimeout: (timeoutId: TTimerId | undefined) => void\n\n    readonly setInterval: (callback: TimeoutCallback, delay: number) => TTimerId\n    readonly clearInterval: (intervalId: TTimerId | undefined) => void\n  }\n\nexport const defaultTimeoutProvider: TimeoutProvider<\n  ReturnType<typeof setTimeout>\n> = {\n  // We need the wrapper function syntax below instead of direct references to\n  // global setTimeout etc.\n  //\n  // BAD: `setTimeout: setTimeout`\n  // GOOD: `setTimeout: (cb, delay) => setTimeout(cb, delay)`\n  //\n  // If we use direct references here, then anything that wants to spy on or\n  // replace the global setTimeout (like tests) won't work since we'll already\n  // have a hard reference to the original implementation at the time when this\n  // file was imported.\n  setTimeout: (callback, delay) => setTimeout(callback, delay),\n  clearTimeout: (timeoutId) => clearTimeout(timeoutId),\n\n  setInterval: (callback, delay) => setInterval(callback, delay),\n  clearInterval: (intervalId) => clearInterval(intervalId),\n}\n\n/**\n * Allows customization of how timeouts are created.\n *\n * @tanstack/query-core makes liberal use of timeouts to implement `staleTime`\n * and `gcTime`. The default TimeoutManager provider uses the platform's global\n * `setTimeout` implementation, which is known to have scalability issues with\n * thousands of timeouts on the event loop.\n *\n * If you hit this limitation, consider providing a custom TimeoutProvider that\n * coalesces timeouts.\n */\nexport class TimeoutManager implements Omit<TimeoutProvider, 'name'> {\n  // We cannot have TimeoutManager<T> as we must instantiate it with a concrete\n  // type at app boot; and if we leave that type, then any new timer provider\n  // would need to support ReturnType<typeof setTimeout>, which is infeasible.\n  //\n  // We settle for type safety for the TimeoutProvider type, and accept that\n  // this class is unsafe internally to allow for extension.\n  #provider: TimeoutProvider<any> = defaultTimeoutProvider\n  #providerCalled = false\n\n  setTimeoutProvider<TTimerId extends ManagedTimerId>(\n    provider: TimeoutProvider<TTimerId>,\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (this.#providerCalled && provider !== this.#provider) {\n        // After changing providers, `clearTimeout` will not work as expected for\n        // timeouts from the previous provider.\n        //\n        // Since they may allocate the same timeout ID, clearTimeout may cancel an\n        // arbitrary different timeout, or unexpected no-op.\n        //\n        // We could protect against this by mixing the timeout ID bits\n        // deterministically with some per-provider bits.\n        //\n        // We could internally queue `setTimeout` calls to `TimeoutManager` until\n        // some API call to set the initial provider.\n        console.error(\n          `[timeoutManager]: Switching provider after calls to previous provider might result in unexpected behavior.`,\n          { previous: this.#provider, provider },\n        )\n      }\n    }\n\n    this.#provider = provider\n    if (process.env.NODE_ENV !== 'production') {\n      this.#providerCalled = false\n    }\n  }\n\n  setTimeout(callback: TimeoutCallback, delay: number): ManagedTimerId {\n    if (process.env.NODE_ENV !== 'production') {\n      this.#providerCalled = true\n    }\n    return this.#provider.setTimeout(callback, delay)\n  }\n\n  clearTimeout(timeoutId: ManagedTimerId | undefined): void {\n    this.#provider.clearTimeout(timeoutId)\n  }\n\n  setInterval(callback: TimeoutCallback, delay: number): ManagedTimerId {\n    if (process.env.NODE_ENV !== 'production') {\n      this.#providerCalled = true\n    }\n    return this.#provider.setInterval(callback, delay)\n  }\n\n  clearInterval(intervalId: ManagedTimerId | undefined): void {\n    this.#provider.clearInterval(intervalId)\n  }\n}\n\nexport const timeoutManager = new TimeoutManager()\n\n/**\n * In many cases code wants to delay to the next event loop tick; this is not\n * mediated by {@link timeoutManager}.\n *\n * This function is provided to make auditing the `tanstack/query-core` for\n * incorrect use of system `setTimeout` easier.\n */\nexport function systemSetTimeoutZero(callback: TimeoutCallback): void {\n  setTimeout(callback, 0)\n}\n","import { timeoutManager } from './timeoutManager'\nimport type {\n  DefaultError,\n  Enabled,\n  FetchStatus,\n  MutationKey,\n  MutationStatus,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n  StaleTime,\n  StaleTimeFunction,\n} from './types'\nimport type { Mutation } from './mutation'\nimport type { FetchOptions, Query } from './query'\n\n// TYPES\n\nexport interface QueryFilters<TQueryKey extends QueryKey = QueryKey> {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: TQueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (\n    mutation: Mutation<TData, TError, TVariables, TContext>,\n  ) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Filter by mutation status\n   */\n  status?: MutationStatus\n}\n\nexport type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput)\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in globalThis\n\nexport function noop(): void\nexport function noop(): undefined\nexport function noop() {}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: TInput) => TOutput)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function resolveStaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  staleTime:\n    | undefined\n    | StaleTimeFunction<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): StaleTime | undefined {\n  return typeof staleTime === 'function' ? staleTime(query) : staleTime\n}\n\nexport function resolveEnabled<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  enabled: undefined | Enabled<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): boolean | undefined {\n  return typeof enabled === 'function' ? enabled(query) : enabled\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: Pick<QueryOptions<any, any, any, any>, 'queryKeyHashFn'>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query & mutation keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return Object.keys(b).every((key) => partialMatchKey(a[key], b[key]))\n  }\n\n  return false\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (!array && !(isPlainObject(a) && isPlainObject(b))) return b\n\n  const aItems = array ? a : Object.keys(a)\n  const aSize = aItems.length\n  const bItems = array ? b : Object.keys(b)\n  const bSize = bItems.length\n  const copy: any = array ? new Array(bSize) : {}\n\n  let equalItems = 0\n\n  for (let i = 0; i < bSize; i++) {\n    const key: any = array ? i : bItems[i]\n    const aItem = a[key]\n    const bItem = b[key]\n\n    if (aItem === bItem) {\n      copy[key] = aItem\n      if (array ? i < aSize : hasOwn.call(a, key)) equalItems++\n      continue\n    }\n\n    if (\n      aItem === null ||\n      bItem === null ||\n      typeof aItem !== 'object' ||\n      typeof bItem !== 'object'\n    ) {\n      copy[key] = bItem\n      continue\n    }\n\n    const v = replaceEqualDeep(aItem, bItem)\n    copy[key] = v\n    if (v === aItem) equalItems++\n  }\n\n  return aSize === bSize && equalItems === aSize ? a : copy\n}\n\n/**\n * Shallow compare objects.\n */\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown): value is Array<unknown> {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Record<PropertyKey, unknown> {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has no constructor\n  const ctor = o.constructor\n  if (ctor === undefined) {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Handles Objects created by Object.create(<arbitrary prototype>)\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    timeoutManager.setTimeout(resolve, timeout)\n  })\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data) as TData\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        return replaceEqualDeep(prevData, data)\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`,\n        )\n\n        // Prevent the replaceEqualDeep from being called again down below.\n        throw error\n      }\n    }\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n\nexport function keepPreviousData<T>(\n  previousData: T | undefined,\n): T | undefined {\n  return previousData\n}\n\nexport function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [...items, item]\n  return max && newItems.length > max ? newItems.slice(1) : newItems\n}\n\nexport function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [item, ...items]\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems\n}\n\nexport const skipToken = Symbol()\nexport type SkipToken = typeof skipToken\n\nexport function ensureQueryFn<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: {\n    queryFn?: QueryFunction<TQueryFnData, TQueryKey> | SkipToken\n    queryHash?: string\n  },\n  fetchOptions?: FetchOptions<TQueryFnData>,\n): QueryFunction<TQueryFnData, TQueryKey> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`,\n      )\n    }\n  }\n\n  // if we attempt to retry a fetch that was triggered from an initialPromise\n  // when we don't have a queryFn yet, we can't retry, so we just return the already rejected initialPromise\n  // if an observer has already mounted, we will be able to retry with that queryFn\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise!\n  }\n\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () =>\n      Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`))\n  }\n\n  return options.queryFn\n}\n\nexport function shouldThrowError<T extends (...args: Array<any>) => boolean>(\n  throwOnError: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow throwOnError function to override throwing behavior on a per-error basis\n  if (typeof throwOnError === 'function') {\n    return throwOnError(...params)\n  }\n\n  return !!throwOnError\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n","// TYPES\n\nimport { systemSetTimeoutZero } from './timeoutManager'\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport const defaultScheduler: ScheduleFunction = systemSetTimeoutZero\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn = defaultScheduler\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","/**\n * Thenable types which matches React's types for promises\n *\n * React seemingly uses `.status`, `.value` and `.reason` properties on a promises to optimistically unwrap data from promises\n *\n * @see https://github.com/facebook/react/blob/main/packages/shared/ReactTypes.js#L112-L138\n * @see https://github.com/facebook/react/blob/4f604941569d2e8947ce1460a0b2997e835f37b9/packages/react-debug-tools/src/ReactDebugHooks.js#L224-L227\n */\n\nimport { noop } from './utils'\n\ninterface Fulfilled<T> {\n  status: 'fulfilled'\n  value: T\n}\ninterface Rejected {\n  status: 'rejected'\n  reason: unknown\n}\ninterface Pending<T> {\n  status: 'pending'\n\n  /**\n   * Resolve the promise with a value.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  resolve: (value: T) => void\n  /**\n   * Reject the promise with a reason.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  reject: (reason: unknown) => void\n}\n\nexport type FulfilledThenable<T> = Promise<T> & Fulfilled<T>\nexport type RejectedThenable<T> = Promise<T> & Rejected\nexport type PendingThenable<T> = Promise<T> & Pending<T>\n\nexport type Thenable<T> =\n  | FulfilledThenable<T>\n  | RejectedThenable<T>\n  | PendingThenable<T>\n\nexport function pendingThenable<T>(): PendingThenable<T> {\n  let resolve: Pending<T>['resolve']\n  let reject: Pending<T>['reject']\n  // this could use `Promise.withResolvers()` in the future\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  }) as PendingThenable<T>\n\n  thenable.status = 'pending'\n  thenable.catch(() => {\n    // prevent unhandled rejection errors\n  })\n\n  function finalize(data: Fulfilled<T> | Rejected) {\n    Object.assign(thenable, data)\n\n    // clear pending props props to avoid calling them twice\n    delete (thenable as Partial<PendingThenable<T>>).resolve\n    delete (thenable as Partial<PendingThenable<T>>).reject\n  }\n\n  thenable.resolve = (value) => {\n    finalize({\n      status: 'fulfilled',\n      value,\n    })\n\n    resolve(value)\n  }\n  thenable.reject = (reason) => {\n    finalize({\n      status: 'rejected',\n      reason,\n    })\n\n    reject(reason)\n  }\n\n  return thenable\n}\n\n/**\n * This function takes a Promise-like input and detects whether the data\n * is synchronously available or not.\n *\n * It does not inspect .status, .value or .reason properties of the promise,\n * as those are not always available, and the .status of React's promises\n * should not be considered part of the public API.\n */\nexport function tryResolveSync(promise: Promise<unknown> | Thenable<unknown>) {\n  let data: unknown\n\n  promise\n    .then((result) => {\n      data = result\n      return result\n    }, noop)\n    // .catch can be unavailable on certain kinds of thenable's\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    ?.catch(noop)\n\n  if (data !== undefined) {\n    return { data }\n  }\n\n  return undefined\n}\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { pendingThenable } from './thenable'\nimport { isServer, sleep } from './utils'\nimport type { Thenable } from './thenable'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  initialPromise?: Promise<TData>\n  onCancel?: (error: TError) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n  canRun: () => boolean\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n  canStart: () => boolean\n  start: () => Promise<TData>\n  status: () => 'pending' | 'resolved' | 'rejected'\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError extends Error {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    super('CancelledError')\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\n/**\n * @deprecated Use instanceof `CancelledError` instead.\n */\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let continueFn: ((value?: unknown) => void) | undefined\n\n  const thenable = pendingThenable<TData>()\n\n  const isResolved = () =>\n    (thenable.status as Thenable<TData>['status']) !== 'pending'\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved()) {\n      const error = new CancelledError(cancelOptions) as TError\n      reject(error)\n\n      config.onCancel?.(error)\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const canContinue = () =>\n    focusManager.isFocused() &&\n    (config.networkMode === 'always' || onlineManager.isOnline()) &&\n    config.canRun()\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun()\n\n  const resolve = (value: any) => {\n    if (!isResolved()) {\n      continueFn?.()\n      thenable.resolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved()) {\n      continueFn?.()\n      thenable.reject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved() || canContinue()) {\n          continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved()) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved()) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // we can re-use config.initialPromise on the first call of run()\n    const initialPromise =\n      failureCount === 0 ? config.initialPromise : undefined\n\n    // Execute query\n    try {\n      promiseOrValue = initialPromise ?? config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved()) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            return canContinue() ? undefined : pause()\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  return {\n    promise: thenable,\n    status: () => thenable.status,\n    cancel,\n    continue: () => {\n      continueFn?.()\n      return thenable\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      // Start loop\n      if (canStart()) {\n        run()\n      } else {\n        pause().then(run)\n      }\n      return thenable\n    },\n  }\n}\n","import { timeoutManager } from './timeoutManager'\nimport { isServer, isValidTimeout } from './utils'\nimport type { ManagedTimerId } from './timeoutManager'\n\nexport abstract class Removable {\n  gcTime!: number\n  #gcTimeout?: ManagedTimerId\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = timeoutManager.setTimeout(() => {\n        this.optionalRemove()\n      }, this.gcTime)\n    }\n  }\n\n  protected updateGcTime(newGcTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no gcTime is set\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.#gcTimeout) {\n      timeoutManager.clearTimeout(this.#gcTimeout)\n      this.#gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { CancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\nimport type { QueryCache } from './queryCache'\nimport type { QueryClient } from './queryClient'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n  StaleTime,\n} from './types'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  client: QueryClient\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  client: QueryClient\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #client: QueryClient\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#client = config.client\n    this.#cache = this.#client.getQueryCache()\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (this.state && this.state.data === undefined) {\n      const defaultState = getDefaultState(this.options)\n      if (defaultState.data !== undefined) {\n        this.setData(defaultState.data, {\n          updatedAt: defaultState.dataUpdatedAt,\n          manual: true,\n        })\n        this.#initialState = defaultState\n      }\n    }\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStatic(): boolean {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) =>\n          resolveStaleTime(observer.options.staleTime, this) === 'static',\n      )\n    }\n\n    return false\n  }\n\n  isStale(): boolean {\n    // check observers first, their `isStale` has the source of truth\n    // calculated with `isStaleByTime` and it takes `enabled` into account\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined || this.state.isInvalidated\n  }\n\n  isStaleByTime(staleTime: StaleTime = 0): boolean {\n    // no data is always stale\n    if (this.state.data === undefined) {\n      return true\n    }\n    // static is never stale\n    if (staleTime === 'static') {\n      return false\n    }\n    // if the query is invalidated, it is stale\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    return !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  async fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (\n      this.state.fetchStatus !== 'idle' &&\n      // If the promise in the retyer is already rejected, we have to definitely\n      // re-start the fetch; there is a chance that the query is still in a\n      // pending state when that happens\n      this.#retryer?.status() !== 'rejected'\n    ) {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const createQueryFnContext = (): QueryFunctionContext<TQueryKey> => {\n        const queryFnContext: OmitKeyof<\n          QueryFunctionContext<TQueryKey>,\n          'signal'\n        > = {\n          client: this.#client,\n          queryKey: this.queryKey,\n          meta: this.meta,\n        }\n        addSignalProperty(queryFnContext)\n        return queryFnContext as QueryFunctionContext<TQueryKey>\n      }\n\n      const queryFnContext = createQueryFnContext()\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const createFetchContext = (): FetchContext<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey\n    > => {\n      const context: OmitKeyof<\n        FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n        'signal'\n      > = {\n        fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        client: this.#client,\n        state: this.state,\n        fetchFn,\n      }\n\n      addSignalProperty(context)\n      return context as FetchContext<TQueryFnData, TError, TData, TQueryKey>\n    }\n\n    const context = createFetchContext()\n\n    this.options.behavior?.onFetch(context, this as unknown as Query)\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      onCancel: (error) => {\n        if (error instanceof CancelledError && error.revert) {\n          this.setState({\n            ...this.#revertState,\n            fetchStatus: 'idle' as const,\n          })\n        }\n        abortController.abort()\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    try {\n      const data = await this.#retryer.start()\n      // this is more of a runtime guard\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (data === undefined) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n          )\n        }\n        throw new Error(`${this.queryHash} data is undefined`)\n      }\n\n      this.setData(data)\n\n      // Notify cache callback\n      this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n      this.#cache.config.onSettled?.(\n        data,\n        this.state.error as any,\n        this as Query<any, any, any, any>,\n      )\n      return data\n    } catch (error) {\n      if (error instanceof CancelledError) {\n        if (error.silent) {\n          // silent cancellation implies a new fetch is going to be started,\n          // so we piggyback onto that promise\n          return this.#retryer.promise\n        } else if (error.revert) {\n          // transform error into reverted state data\n          // if the initial fetch was cancelled, we have no data, so we have\n          // to get reject with a CancelledError\n          if (this.state.data === undefined) {\n            throw error\n          }\n          return this.state.data\n        }\n      }\n      this.#dispatch({\n        type: 'error',\n        error: error as TError,\n      })\n\n      // Notify cache callback\n      this.#cache.config.onError?.(\n        error as any,\n        this as Query<any, any, any, any>,\n      )\n      this.#cache.config.onSettled?.(\n        this.state.data,\n        error as any,\n        this as Query<any, any, any, any>,\n      )\n\n      throw error // rethrow the error for further handling\n    } finally {\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          const newState = {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success' as const,\n            ...(!action.manual && {\n              fetchStatus: 'idle' as const,\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n          // If fetching ends successfully, we don't need revertState as a fallback anymore.\n          // For manual updates, capture the state to revert to it in case of a cancellation.\n          this.#revertState = action.manual ? newState : undefined\n\n          return newState\n        case 'error':\n          const error = action.error\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n","import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { timeoutManager } from './timeoutManager'\nimport type { ManagedTimerId } from './timeoutManager'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ManagedTimerId\n  #refetchIntervalId?: ManagedTimerId\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult()\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key as keyof QueryObserverResult)\n        onPropTracked?.(key as keyof QueryObserverResult)\n        if (\n          key === 'promise' &&\n          !this.options.experimental_prefetchInRender &&\n          this.#currentThenable.status === 'pending'\n        ) {\n          this.#currentThenable.reject(\n            new Error(\n              'experimental_prefetchInRender feature flag is not enabled',\n            ),\n          )\n        }\n        return Reflect.get(target, key)\n      },\n    })\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = timeoutManager.setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = timeoutManager.setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      timeoutManager.clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      timeoutManager.clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Per default, use query data\n    data = newState.data as unknown as TData\n    let skipSelect = false\n\n    // use placeholderData if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n        // we have to skip select when reading this memoization\n        // because prevResult.data is already \"selected\"\n        skipSelect = true\n      } else {\n        // compute placeholderData\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    // Select data if needed\n    // this also runs placeholderData through the select function\n    if (options.select && data !== undefined && !skipSelect) {\n      // Memoize select result\n      if (\n        prevResult &&\n        data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(data as any)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n      isEnabled: resolveEnabled(options.enabled, query) !== false,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    this.#notify({ listeners: shouldNotifyListeners() })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: { listeners: boolean }): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (\n    resolveEnabled(options.enabled, query) !== false &&\n    resolveStaleTime(options.staleTime, query) !== 'static'\n  ) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): React.JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from '@tanstack/query-core'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n  suspense: boolean | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    ((suspense && result.data === undefined) ||\n      shouldThrowError(throwOnError, [result.error, query]))\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n    const MIN_SUSPENSE_TIME_MS = 1000\n\n    const clamp = (value: number | 'static' | undefined) =>\n      value === 'static'\n        ? value\n        : Math.max(value ?? MIN_SUSPENSE_TIME_MS, MIN_SUSPENSE_TIME_MS)\n\n    const originalStaleTime = defaultedOptions.staleTime\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => clamp(originalStaleTime(...args))\n        : clamp(originalStaleTime)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(\n        defaultedOptions.gcTime,\n        MIN_SUSPENSE_TIME_MS,\n      )\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n","'use client'\nimport * as React from 'react'\n\nimport { isServer, noop, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './IsRestoringProvider'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const client = useQueryClient(queryClient)\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`,\n      )\n    }\n  }\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions)\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n      suspense: defaultedOptions.suspense,\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  NoInfer,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<NoInfer<TData>, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n"],"names":["_checkPrivateRedeclaration","obj","privateCollection","has","TypeError","_classPrivateMethodInitSpec","privateSet","add","_classPrivateFieldInitSpec","privateMap","value","set","_classPrivateMethodGet","receiver","fn","_classExtractFieldDescriptor","action","get","_classPrivateFieldGet","descriptor","call","_classPrivateFieldSet","writable","Subscribable","_classCallCheck","listeners","Set","this","subscribe","bind","_createClass","key","listener","onSubscribe","_this","delete","onUnsubscribe","size","defaultTimeoutProvider","setTimeout","callback","delay","clearTimeout","timeoutId","setInterval","clearInterval","intervalId","timeoutManager","TimeoutManager","provider","isServer","window","globalThis","noop","isValidTimeout","Infinity","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","resolveStaleTime","query","resolveEnabled","enabled","hasOwn","Object","prototype","hasOwnProperty","replaceEqualDeep","a","b","array","isPlainArray","isPlainObject","aSize","keys","length","bItems","bSize","copy","Array","equalItems","i","aItem","bItem","v","shallowEqualObjects","isArray","o","hasObjectPrototype","ctor","constructor","prot","getPrototypeOf","toString","replaceData","prevData","data","options","structuralSharing","skipToken","Symbol","ensureQueryFn","fetchOptions","queryFn","initialPromise","Promise","reject","Error","queryHash","focusManager","FocusManager","_inherits","onFocus","addEventListener","removeEventListener","setEventListener","hasListeners","setup","_this2","focused","setFocused","isFocused","forEach","document","_globalThis$document","visibilityState","defaultScheduler","notifyManager","queue","transactions","notifyFn","batchNotifyFn","scheduleFn","schedule","push","batch","result","originalQueue","flush","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","setScheduler","createNotifyManager","onlineManager","OnlineManager","onOnline","onlineListener","offlineListener","setOnline","online","pendingThenable","resolve","thenable","_resolve","_reject","finalize","assign","status","catch","reason","defaultRetryDelay","failureCount","min","canFetch","networkMode","isOnline","CancelledError","revert","silent","createRetryer","config","continueFn","isRetryCancelled","isResolved","canContinue","canRun","canStart","pause","continueResolve","onPause","_config$onPause","then","onContinue","_config$onContinue","run","promiseOrValue","error","timeout","retry","retryDelay","shouldRetry","onFail","_config$onFail","promise","cancel","cancelOptions","onCancel","_config$onCancel","continue","cancelRetry","continueRetry","start","Removable","clearGcTimeout","gcTime","optionalRemove","newGcTime","Query","state","type","fetchFailureCount","fetchFailureReason","fetchStatus","fetchState","_this5","fetchMeta","meta","newState","dataUpdateCount","dataUpdatedAt","isInvalidated","manual","errorUpdateCount","errorUpdatedAt","reducer","observers","observer","onQueryUpdate","notify","getDefaultState","initialData","hasData","initialDataUpdatedAt","QueryObserver","client","bindMethods","setOptions","refetch","addObserver","shouldFetchOnMount","updateResult","destroy","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","removeObserver","prevOptions","prevQuery","defaultQueryOptions","_defaulted","getQueryCache","mounted","shouldFetchOptionally","nextRefetchInterval","build","createResult","optimisticResult","getCurrentResult","shouldAssignObserverCurrentProperties","onPropTracked","Proxy","target","trackProp","experimental_prefetchInRender","Reflect","fetch","defaultedOptions","_this3","_this4","cancelRefetch","prevResult","prevResultState","prevResultOptions","queryInitialState","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","skipSelect","placeholderData","select","selectError","isFetching","isPending","isError","isLoading","nextResult","isSuccess","isInitialLoading","failureReason","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","isStale","isEnabled","finalizeThenableIfPossible","recreateThenable","pending","prevThenable","notifyOnChangeProps","_this6","notifyOnChangePropsValue","includedProps","throwOnError","some","typedKey","shouldNotifyListeners","_this7","refetchInterval","nextInterval","_this8","refetchIntervalInBackground","notifyOptions","_this9","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","QueryClientContext","React","createValue","isReset","clearReset","reset","QueryErrorResetBoundaryContext","getHasError","errorResetBoundary","params","shouldThrowError","IsRestoringContext","fetchOptimistic","Provider","useBaseQuery","Observer","queryClient","isRestoring","useQueryClient","queries","getDefaultOptions","_experimental_beforeQuery","_client$getDefaultOpt","_client$getDefaultOpt2","MIN_SUSPENSE_TIME_MS","clamp","originalStaleTime","ensureSuspenseTimers","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","isNewCacheEntry","_React$useState2","getOptimisticResult","shouldSubscribe","subscribed","onStoreChange","unsubscribe","shouldSuspend","_experimental_afterQuery","_client$getDefaultOpt3","_client$getDefaultOpt4","willFetch","_client$getQueryCache","finally","trackResult","useQuery"],"sourceRoot":""}