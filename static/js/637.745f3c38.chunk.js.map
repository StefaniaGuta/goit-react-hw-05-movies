{"version":3,"file":"static/js/637.745f3c38.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","webpack://react-homework-template/./src/components/SearchMoviesList/SearchMoviesList.module.css?41bb","components/SearchMoviesList/SearchMoviesList.jsx","webpack://react-homework-template/./src/components/Movies/Movies.module.css?9f30","components/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searcbarForm\":\"Searchbar_searcbarForm__ODlrq\"};","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styles from './Searchbar.module.css';\n\nconst Searchbar = ({ onSubmit, resetQuery }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [inputValue, setInputValue] = useState(searchParams.get('query') ?? '');\n\n  useEffect(() => {\n    setInputValue('');\n  }, [resetQuery]);\n\n  const handleInputChange = event => {\n    const query = event.target.value;\n    setInputValue(query);\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(inputValue);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={styles.searcbarForm}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Type a movie to watch\"\n          name=\"inputValue\"\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  resetQuery: PropTypes.bool.isRequired,\n};\n\nexport default Searchbar;","// extracted by mini-css-extract-plugin\nexport default {\"moviesListContainer\":\"SearchMoviesList_moviesListContainer__CfZhi\",\"moviesList\":\"SearchMoviesList_moviesList__1XiBb\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { IMAGE_URL } from '../../redux/movies/getAPI';\nimport styles from './SearchMoviesList.module.css';\n\nconst SearchMoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <div className={styles.moviesListContainer}>\n        {movies.map(movie => (\n          <Link\n            to={`/movies/${movie.id}`}\n            state={{ from: location }}\n            key={movie.id}\n            className={styles.moviesList}\n          >\n            <div>\n              <img src={IMAGE_URL + movie.backdrop_path} alt={movie.title} />\n            </div>\n            <div>\n              <h3>{movie.title}</h3>\n              <p>Release data: {movie.release_date}</p>\n              <p>User score: {movie.vote_average.toFixed(1)} %</p>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </>\n  );\n};\n\nSearchMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      backdrop_path: PropTypes.string,\n      release_date: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default SearchMoviesList;","// extracted by mini-css-extract-plugin\nexport default {\"back\":\"Movies_back__jnmbw\"};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { BackLink } from '../API/Link.styled';\nimport { getSearchMovies } from '../../redux/movies/getAPI';\nimport Loader from '../Loader/Loader';\nimport Searchbar from '../Searchbar/Searchbar';\nimport SearchMoviesList from '../SearchMoviesList/SearchMoviesList';\nimport Notiflix from 'notiflix';\nimport styles from './Movies.module.css';\nimport { useDispatch } from 'react-redux';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [resetQuery, setResetQuery] = useState(false);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const searchMovies = async () => {\n      if (query === '') {\n        setIsLoading(false);\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        const response = await dispatch(getSearchMovies(query));\n        console.log(\"search\", response.payload)\n        if (response.payload.length === 0) {\n          Notiflix.Notify.failure('No movies found with the given title!');\n        }\n        setMovies(response.payload);\n      } catch (error) {\n        console.error('Error fetching trending movies:', error);\n        Notiflix.Notify.failure('An error occurred while searching for movies!');\n      } finally {\n        setIsLoading(false);\n        setResetQuery(true); \n      }\n    }\n    searchMovies();\n  }, [dispatch, query]);\n\n  const handleSubmit = newQuery => {\n    setMovies([]);\n    setQuery(newQuery);\n    setResetQuery(false);\n  };\n\n  return (\n    <>\n      <div className={styles.back}>\n        <BackLink to={backLinkHref}>‚ùÆ Go Back</BackLink>\n        <Searchbar onSubmit={handleSubmit} resetQuery={resetQuery} />\n      </div>\n\n      {isLoading ? <Loader /> : <SearchMoviesList movies={movies} />}\n    </>\n  );\n};\n\nMovies.propTypes = {\n  movies: PropTypes.array,\n};\n\nexport default Movies;"],"names":["_ref","_searchParams$get","onSubmit","resetQuery","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","get","_useState2","inputValue","setInputValue","useEffect","_jsx","_Fragment","children","_jsxs","event","preventDefault","className","styles","type","autoComplete","autoFocus","placeholder","name","value","onChange","query","target","movies","location","useLocation","map","movie","Link","to","concat","id","state","from","src","IMAGE_URL","backdrop_path","alt","title","release_date","vote_average","toFixed","_location$state$from","_location$state","setMovies","_useState3","_useState4","setQuery","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","setResetQuery","backLinkHref","dispatch","useDispatch","searchMovies","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","abrupt","getSearchMovies","sent","console","log","payload","length","Notiflix","t0","error","finish","stop","apply","arguments","BackLink","Searchbar","newQuery","Loader","SearchMoviesList"],"sourceRoot":""}