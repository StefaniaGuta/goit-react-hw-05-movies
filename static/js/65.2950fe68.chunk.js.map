{"version":3,"file":"static/js/65.2950fe68.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","components/Cast/Cast.jsx","components/MovieDetails/MovieDetails.jsx","components/Trailer/Trailer.jsx"],"sourcesContent":["import React, {  useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../../redux/movies/getAPI';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport noImg from '../Images/no_image.jpg';\nimport './Reviews.css';\n\nconst Reviews = () => {\n  const [open, setOpen] = useState()\n  const [movieReviews, setMovieReviews] = useState([]);\n  const { movieId } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const response = await dispatch(getMovieReviews(movieId));\n        setMovieReviews(response.payload);\n      } catch (error) {\n        console.error('Error fetching movie credits:', error);\n      }\n    }\n  fetchMovieReviews();\n  }, [dispatch, movieId]);\n\n  const openModal = () => {\n    setOpen(!open)\n  }\n \n  return (\n    <section className='reviewsSection'>\n      <h3>Reviews</h3>\n      <ul className='reviewsList'>\n        {movieReviews.length > 0 ? (\n          movieReviews.slice(0, 4).map(movieReview => (\n            <li className='review' key={movieReview.id}>\n              <img src={noImg} alt='author'/>\n              <span className='reviewContent'>\n                <h2 className='reviewAuthor'>{movieReview.author}</h2>\n                <p className='reviewText'>{movieReview.content}</p>\n              </span>\n            </li>\n          ))\n        ) : (<p>We do not have any reviews to diplay for this movie!</p>)}\n        {movieReviews.length > 4 ? <button className='seeMoreReviwsBtn' onClick={openModal}>See more Reviews</button> : null}\n      </ul>\n\n      {open ? (\n        <ul className='reviewsModal'>\n          {movieReviews.map(movieReview => (\n            <li className='reviewModal' key={movieReview.id}>\n              <img src={noImg} alt='author'/>\n              <span className='modalReviewContent'>\n                <h2 className='reviewAuthor'>{movieReview.author}</h2>\n                <p className='modalReviewText'>{movieReview.content}</p>\n              </span>\n            </li>\n          ))}\n        </ul>\n      ) : null}\n    </section>\n  );\n};\n\nexport default Reviews;","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getMovieCast, IMAGE_URL } from '../../redux/movies/getAPI';\nimport noImage from '../Images/no_image.jpg';\nimport './Cast.css';\n\nconst Cast = () => {\n  const [movieCredits, setMovieCredits] = useState([]);\n  const [open, setOpen] = useState();\n  const { movieId } = useParams();\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      try {\n        const response = await dispatch(getMovieCast(movieId));\n        setMovieCredits(response.payload.cast);\n      } catch (error) {\n        console.error('Error fetching movie credits:', error);\n      }\n    }\n    fetchMovieCredits();\n  }, [dispatch, movieId]);\n\nconst openModal = () => {\n    setOpen(!open)\n  }\n\n  return (\n    <section className='movie-cast'>\n      <ul>\n        {movieCredits.length > 0 && movieCredits ? \n          (movieCredits.slice(0, 5).map(movieCredit => (\n            <li className='movieCastActor' key={movieCredit.id} >\n            <img className='actorPhoto'\n              src={movieCredit.profile_path ? IMAGE_URL + movieCredit.profile_path : noImage}\n              alt={movieCredit.name}\n            />\n            <h3 className='movieActorName'>{movieCredit.name}</h3>\n          </li>\n        ))) : (<p>We do not have any information to display about this production!</p>)}\n        <button onClick={openModal} className='viewMoreCastBtn'>View more</button>\n      </ul>\n      {open ? (\n        <ul className='castModal'>\n          {movieCredits.map(cast => (\n            <li className='castModalActor' key={cast.id} >\n            <img className='castModalActorPhoto'\n              src={cast.profile_path ? IMAGE_URL + cast.profile_path : noImage}\n              alt={cast.name}\n            />\n            <h3 className='movieActorName'>\n              {cast.name}\n              <p className='movieActorCharacterName'>Character: {cast.character}</p>\n            </h3>\n          </li>\n          ))}\n        </ul>\n      ) : null}\n    </section>\n  );\n};\n\nexport default Cast;","import React, { useEffect, useState } from 'react';\nimport { useParams,  Link } from 'react-router-dom';\nimport { getMovieDetails, IMAGE_URL, moviesRecommendations } from '../../redux/movies/getAPI';\nimport Loader from '../Loader/Loader';\nimport { useDispatch } from 'react-redux';\nimport noImage from '../Images/no_image.jpg';\nimport Reviews from 'components/Reviews/Reviews';\nimport Cast from 'components/Cast/Cast';\nimport url from '../Images/icons.svg';\nimport Trailers from 'components/Trailer/Trailer';\nimport './MovieDetails.css';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useDispatch();\n  const [recommendation, setRecommendation] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      setIsLoading(true);\n      try {\n        const response = await dispatch(getMovieDetails(movieId));\n        setMovie(response.payload);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    const getMovies = async () => {\n      const res = await dispatch(moviesRecommendations(movieId));\n      setRecommendation(res.payload.results);\n    };    \n    fetchMovieDetails();\n    getMovies();\n  }, [dispatch, movieId]);\n\n\n  const formatRuntime = (minutes) => {\n    if (!minutes || minutes <= 0) return \"N/A\";\n    const h = Math.floor(minutes / 60);\n    const m = minutes % 60;\n    return `${h}h ${m}m`;\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        movie && (\n          <div className=\"movieDetailsContainer\">\n            <div className=\"movieInfo\" style={{\n              backgroundImage: `url(https://image.tmdb.org/t/p/w1920_and_h800_multi_faces${movie.poster_path})`,\n              backgroundSize: \"cover\",\n              backgroundPosition: \"center\",\n            }}>\n              <span className='title-watchlist-container'>\n                <h1 className='movieName'>\n                  {movie.name || movie.title}   ({new Date(movie.release_date).getFullYear()})\n                </h1>\n                <span>\n                  <svg className='addToListSvg' width=\"30\" height=\"30\"><use xlinkHref={`${url}#heart`}/></svg>\n                  <svg className='addToListSvg' width=\"22\" height=\"25\" ><use xlinkHref={`${url}#favorite`}/></svg>\n                </span>\n              </span>\n              <div className='infoAbtMovie'>\n                <div>\n                  <img className='infoAbtMovieImg'\n                    src={movie.poster_path || movie.backdrop_path ? IMAGE_URL + movie.poster_path : noImage}\n                    alt={movie.title || movie.name}\n                  />\n                  <Trailers id={movie} show={\"movie\"}/>\n                </div>\n                <div>\n                  <h2 className='movieName'>{movie.name || movie.title}</h2>\n                  <p>{movie.tagline || \"One step. One decision. A new world.\"}</p>\n                  <div className='movie-in-numbers'>\n                    <p>\n                      <svg width=\"15\" height=\"15\"><use xlinkHref={`${url}#clock`}/></svg>\n                      {formatRuntime(movie.runtime)}\n                    </p>\n                    <p><svg width=\"15\" height=\"15\"><use xlinkHref={`${url}#star`}/></svg>{movie.vote_average.toFixed(1)}</p>\n                    <p>\n                      <svg width=\"20\" height=\"20\"><use xlinkHref={`${url}#eye`}/></svg>\n                      {movie.vote_count}\n                    </p>\n                  </div>\n\n                  <div className='movie-details-cast'>\n                    <div className='movie-details'>\n                      <h3 className='movieDetailsContainerSectionTitle'>DETAILS</h3>\n                      <p>\n                        <b>Country:</b> \n                        {movie.production_countries[0].name}\n                      </p>\n                      <p>\n                        <b>Genre:</b>    \n                        {movie.genres && movie.genres.length > 0\n                          ? movie.genres.map(genre => genre.name).join(\", \")\n                          : \"Other\"}\n                      </p>\n                      <p>\n                        <b>Language:</b>\n                        {movie.spoken_languages && movie.spoken_languages.length > 0\n                          ? movie.spoken_languages.map(lang => lang.english_name).join(\", \")\n                          : \"Other\"}\n                      </p>\n                      <p>\n                        <b>Date Release:</b> \n                        {movie.release_date}\n                      </p>\n                      <p>\n                        <b>Production: </b>\n                        {movie.production_companies && movie.production_companies.length > 0\n                          ? movie.production_companies.map(prod => prod.name).join(\", \")\n                          : \"Not specified\"}\n                      </p>\n                      <p>\n                        <b>Colection:</b>\n                        {movie.belongs_to_collection\n                          ? movie.belongs_to_collection.name\n                          : \"Not specified\"}\n                      </p>\n                    </div>\n                    <div className='movie-cast'>\n                      <h3 className='movieDetailsContainerSectionTitle'>CAST</h3>\n                      <Cast/>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"movieExtraInfo\">\n              <span className='storyLine'>\n                <h3 className='movieDetailsContainerSectionTitle'>Storyline</h3>\n                {movie.overview}\n              </span>\n              <div>\n                <h3 className='movieDetailsContainerSectionTitle'>Similar Movies</h3>\n                <ul className='recommendationList'>\n                  {recommendation\n                    .filter(m => m.poster_path)\n                    .slice(0, 5)\n                    .map((m) => (\n                      <Link key={m.id} to={`/movie/${m.id}`}>\n                        <img className='movieExtraInfoImg'\n                          src={IMAGE_URL + m.poster_path}\n                          alt={m.title || m.name}\n                        />\n                        <h2 className='specificMovieTitle'>{m.title || m.name}</h2>\n                      </Link>\n                  ))}\n                  <button className='viewMoreRecommendationMovies'>View more</button>\n                </ul>\n              </div>\n              <Reviews/>\n            </div>\n          </div>\n        )\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import { useEffect, useState, useRef, } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getTrailer } from \"../../redux/movies/getAPI\";\nimport './Trailer.css';\n\nconst Trailers = ( movieId ) => {\n  const dispatch = useDispatch();\n  const [trailers, setTrailers] = useState([]);\n  const [open, setOpen] = useState(null);\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    const loadTrailers = async () => {\n      try {\n        const res = await dispatch(getTrailer({show: movieId.show, id: movieId.id.id}));\n        \n        const filtered = res.payload.results.filter(\n          (v) => v.site === \"YouTube\" && v.type === \"Teaser\"\n        );\n        setTrailers(filtered);\n      } catch (e) {\n        console.error(\"Eroare la încărcarea trailerelor:\", e);\n      }\n    };\n\n    if (movieId) loadTrailers();\n\n    const handleClickOutside = (e) => {\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\n        setOpen(false);\n      }\n    };\n    if (open) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [dispatch, movieId, open]);\n\n  if (!trailers.length) return null;\n\nconst handleOpen = () => setOpen(!open)\n\n  return (\n    <div className=\"trailers\">\n       <button onClick={handleOpen} type=\"button\">Watch Later</button>\n       {open ? \n       <>\n       {trailers.map((trailer) => (\n         <div ref={modalRef} key={trailer.id} className=\"trailer-item\">\n           <h4>{trailer.name}</h4>\n           <iframe\n             width=\"960\"\n             height=\"509\"\n             src={`https://www.youtube.com/embed/${trailer.key}`}\n             title={trailer.name}\n             allowFullScreen\n           ></iframe>\n         </div>\n       ))}\n       </>\n       : null}\n        \n    </div>\n  );\n};\n\nexport default Trailers;\n"],"names":["_useState","useState","_useState2","_slicedToArray","open","setOpen","_useState3","_useState4","movieReviews","setMovieReviews","movieId","useParams","dispatch","useDispatch","useEffect","fetchMovieReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","getMovieReviews","sent","payload","t0","console","error","stop","apply","arguments","_jsxs","className","children","_jsx","length","slice","map","movieReview","src","noImg","alt","author","content","id","onClick","movieCredits","setMovieCredits","fetchMovieCredits","getMovieCast","cast","movieCredit","profile_path","IMAGE_URL","noImage","name","character","movie","setMovie","isLoading","setIsLoading","_useState5","_useState6","recommendation","setRecommendation","fetchMovieDetails","getMovieDetails","finish","getMovies","_ref2","_callee2","res","_context2","moviesRecommendations","results","_Fragment","Loader","style","backgroundImage","concat","poster_path","backgroundSize","backgroundPosition","title","Date","release_date","getFullYear","width","height","xlinkHref","url","backdrop_path","Trailers","show","tagline","minutes","h","Math","floor","m","formatRuntime","runtime","vote_average","toFixed","vote_count","production_countries","genres","genre","join","spoken_languages","lang","english_name","production_companies","prod","belongs_to_collection","Cast","overview","filter","Link","to","Reviews","trailers","setTrailers","modalRef","useRef","loadTrailers","filtered","getTrailer","v","site","type","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","trailer","ref","key","allowFullScreen"],"sourceRoot":""}