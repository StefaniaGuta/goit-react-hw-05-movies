{"version":3,"file":"static/js/432.27d526c0.chunk.js","mappings":"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","sources":["components/Registration/Registration.jsx"],"sourcesContent":["import { Formik, Form, Field } from \"formik\";\nimport {register } from '../../redux/auth/operations';\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Notiflix from 'notiflix';\nimport \"./Registration.css\";\nimport profilePicture from \"../Images/profileImg.png\";\nimport photo from \"../Images/photo.png\";\n\nconst Registration = () => {\n  const dispatch = useDispatch();\n  const [form, setForm] = useState({ name: '', email: '', password: '' });\n  const navigate = useNavigate();\n\n  const resetForm = () => {\n    setForm({ name: '', email: '', password: '' });\n  };\n\n   const validatePassword = (password) => {\n    const hasUpperCase = /[A-Z]/.test(password);\n    const hasNumber = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*]/.test(password);\n    const isLongEnough = password.length >= 8;\n\n    if (!isLongEnough) {\n       Notiflix.Notify.failure('Password must be at least 8 characters long.');\n    } else if (!hasUpperCase) {\n       Notiflix.Notify.failure('The password should contain at least 1 uppercase character.');\n    } else if (!hasNumber) {\n       Notiflix.Notify.failure('Password must contain at least one number.');\n    } else if (!hasSpecialChar) {\n       Notiflix.Notify.failure('Password must contain at least one special character (!@#$%^&*).');\n    }\n    return ''; \n  };\n\n const handleSubmit = async(e) => {\n    const passwordError = validatePassword(form.password);\n    if (passwordError) {\n      Notiflix.Notify.failure(passwordError);\n      return;\n    }\n    try{\n      const response = await dispatch(register({ ...form }));\n      \n        if (register.fulfilled.match(response.payload)) {\n        resetForm();\n        navigate('/home');\n      } else {\n        console.error(\"Eroare la rÄƒspunsul serverului:\", response.payload);\n      }\n      console.log(response.payload)\n        return response.payload\n    } catch(e){\n      console.log(e)\n    }\n  }\n\n  return(\n    <section className=\"registrationSection\">\n      <p className='helloText'>\n        Hello! <br></br>\n        Please log in or create an account\n        to use the features of this app\n      </p>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: ''\n        }}\n        onSubmit={handleSubmit}\n      >\n        <Form className=\"registrationForm\">\n          <div className=\"profilePicture\">\n            <div className=\"profileImg\">\n              <img width=\"50px\" height=\"50px\" src={profilePicture} alt=\"profilepicture\"/>\n            </div>\n            <span>\n              <img width=\"25px\" height=\"20px\" src={photo} alt=\"un aparat foto\"/>\n              Add an avatar\n            </span>\n          </div>\n          <label>\n            Name*\n            <Field id=\"name\"\n              type=\"text\"\n              className=\"input\"\n              required\n              value={form.name}\n              onChange={(e) => setForm({ ...form, name: e.target.value })}\n              placeholder=\"Enter your email adress\"\n            />\n          </label>\n          <label>\n            Email&\n            <Field id=\"email\"\n              type=\"text\"\n              className=\"input\"\n              required\n              placeholder=\"Enter your email adress\"\n              value={form.email}\n              onChange={(e) => setForm({ ...form, email: e.target.value })}\n            />\n          </label>\n          <label>\n            Password*\n            <Field id=\"password\"\n              type=\"text\"\n              className=\"input\"\n              placeholder=\"Enter your password\"\n              value={form.password}\n              onChange={(e) => setForm({ ...form, password: e.target.value })}\n              required\n            />\n          </label>\n          <button type=\"submit\">Create Profile</button>\n        </Form>\n      </Formik>\n    </section>\n  )\n}\n\nexport default Registration;"],"names":["dispatch","useDispatch","_useState","useState","name","email","password","_useState2","_slicedToArray","form","setForm","navigate","useNavigate","validatePassword","hasUpperCase","test","hasNumber","hasSpecialChar","length","Notiflix","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","e","passwordError","response","_context","prev","next","abrupt","register","_objectSpread","sent","payload","console","error","log","t0","stop","_x","apply","arguments","_jsxs","className","children","_jsx","Formik","initialValues","onSubmit","Form","width","height","src","alt","Field","id","type","required","value","onChange","target","placeholder"],"sourceRoot":""}