{"version":3,"file":"static/js/186.07a56851.chunk.js","mappings":"mPAiDA,UA3CgB,WACd,IAAAA,GAAwCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC5BI,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAkCP,EAAAA,EAAAA,WAAS,GAAKQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,GAAWC,EAAAA,EAAAA,MAiBjB,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACL,OAAnBZ,GAAa,GAAMU,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEMX,GAASY,EAAAA,EAAAA,IAAgBlB,IAAU,KAAD,EAAnDc,EAAQC,EAAAI,KACdpB,EAAgBe,EAASM,SAASL,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAElCO,QAAQC,MAAM,gCAA+BR,EAAAM,IAAS,QAElC,OAFkCN,EAAAC,KAAA,GAEtDX,GAAa,GAAOU,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,wBAEvB,kBAVsB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAYvBlB,GACF,GAAG,CAACH,EAAUN,KAEZ4B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACG1B,GACCwB,EAAAA,EAAAA,KAACG,EAAAA,EAAM,IACLjC,EAAakC,OAAS,GACxBJ,EAAAA,EAAAA,KAAA,MAAAE,SACGhC,EAAamC,KAAI,SAAAC,GAAW,OAC3BC,EAAAA,EAAAA,MAAA,MAAAL,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAII,EAAYE,YAElBR,EAAAA,EAAAA,KAAA,KAAAE,SAAII,EAAYG,YAJTH,EAAYI,GAKhB,OAITV,EAAAA,EAAAA,KAAA,KAAAE,SAAG,+BAIX,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../../redux/movies/getAPI';\nimport Loader from '../Loader/Loader';\nimport { useDispatch } from 'react-redux';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      setIsLoading(true);\n      try {\n        const response = await dispatch(getMovieReviews(movieId));\n        setMovieReviews(response.payload);\n      } catch (error) {\n        console.error('Error fetching movie credits:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchMovieReviews();\n  }, [dispatch, movieId]);\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : movieReviews.length > 0 ? (\n        <ul>\n          {movieReviews.map(movieReview => (\n            <li key={movieReview.id}>\n              <p>\n                <b>{movieReview.author}</b>\n              </p>\n              <p>{movieReview.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;"],"names":["_useState","useState","_useState2","_slicedToArray","movieReviews","setMovieReviews","movieId","useParams","_useState3","_useState4","isLoading","setIsLoading","dispatch","useDispatch","useEffect","fetchMovieReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","getMovieReviews","sent","payload","t0","console","error","finish","stop","apply","arguments","_jsx","_Fragment","children","Loader","length","map","movieReview","_jsxs","author","content","id"],"sourceRoot":""}