{"version":3,"file":"static/js/995.a4dca70f.chunk.js","mappings":"gRAiDA,EA7CqB,SAAHA,GAAoB,IAAdC,EAAMD,EAANC,OAChBC,GAAUC,EAAAA,EAAAA,UA6BhB,OA3BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,WACnB,IAAMC,EAAOJ,EAAQK,QAChBD,GAESA,EAAKE,iBAAiB,MAE9BC,SAAQ,SAACC,GACb,IAAMC,EAAOD,EAAKE,wBAEZC,GADaF,EAAKG,KAAOH,EAAKI,MAAQ,EACfC,OAAOC,WAAa,GAAKD,OAAOC,WAE7DP,EAAKQ,MAAMC,UAAS,uBAAAC,OACC,GAATP,EAAW,0BAAAO,OACb,EAAuB,GAAnBC,KAAKC,IAAIT,GAAa,eAEpCH,EAAKQ,MAAMK,QAAO,GAAAH,OAAM,EAAuB,GAAnBC,KAAKC,IAAIT,GACvC,GACF,EAEMP,EAAOJ,EAAQK,QAIrB,OAHAD,EAAKkB,iBAAiB,SAAUnB,GAChCA,IAEO,kBAAMC,EAAKmB,oBAAoB,SAAUpB,EAAc,CAChE,GAAG,KAGDqB,EAAAA,EAAAA,KAAA,MAAIC,IAAKzB,EAAS0B,UAAU,YAAWC,SACpC5B,EAAO6B,KAAI,SAACC,GAAC,OACZL,EAAAA,EAAAA,KAAA,MAAAG,UACEH,EAAAA,EAAAA,KAAA,OACEE,UAAU,WACVI,IAAKC,EAAAA,GAAYF,EAAEG,YACnBC,IAAKJ,EAAEK,OAASL,EAAEM,QAJbN,EAAEO,GAMN,KAIb,E,uCCmDA,EAxFmB,WAAO,IAADC,EAAAC,EACjBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjBC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkCL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA9BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GA8BtB,OA3BApD,EAAAA,EAAAA,YAAU,WACR,IAAMuD,EAAW,eAAA3D,GAAA4D,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACA1B,GAAS2B,EAAAA,EAAAA,OAAkB,KAAD,EACrC,QADDJ,EAAGC,EAAAI,YACF,IAAHL,GAAY,QAATD,EAAHC,EAAKM,eAAO,IAAAP,GAAZA,EAAcQ,SAChBrB,EAAQc,EAAIM,QAAQE,QAAO,SAAAC,GAAC,OAAGA,EAAEC,aAAa,KAC9CpB,EAAaU,EAAIM,QAAQ,KAC1B,wBAAAL,EAAAU,OAAA,GAAAb,EAAA,KACF,kBANgB,OAAA9D,EAAA4E,MAAA,KAAAC,UAAA,KAOjBlB,GACF,GAAG,CAAClB,KAEJrC,EAAAA,EAAAA,YAAU,WACR,GAAK6C,EAAKsB,OAAV,CAEA,IAAMO,EAAWC,aAAY,WAC3BrB,GAAS,SAACQ,GACR,IAAMc,GAAYd,EAAO,GAAKjB,EAAKsB,OAEnC,OADAjB,EAAaL,EAAK+B,IACXA,CACT,GACF,GAAG,KAEH,OAAO,kBAAMC,cAAcH,EAAU,CAVb,CAW1B,GAAG,CAAC7B,IAEJiC,QAAQC,IAAI1B,IAGV/B,EAAAA,EAAAA,KAAA,WAASE,UAAU,oBAAmBC,SACnCwB,GACC+B,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,eAAcC,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,OACEE,UAAU,eACVI,IACE,wDACAqB,EAAUqB,cAEZvC,IAAKkB,EAAUhB,QAEjB+C,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,aAAYC,SAAA,EACzBuD,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,eAAcC,SAAA,EAC3BH,EAAAA,EAAAA,KAAA,UAAQ2D,KAAK,SAASC,QAAS,kBAAM3C,EAAS,SAAS,EAACd,SAAC,eAGzDH,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAACjD,GAAIe,EAAWmC,KAAM,WAEjCJ,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,QAAOC,SAAA,EACpBH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,aAAYC,SAAEwB,EAAUhB,QACtC+C,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,kBAAiBC,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,WAAUC,SACrBwB,EAAUoC,OAAOC,MAAM,EAAG,GAAG5D,KAAI,SAAA6D,GAAC,OACjCjE,EAAAA,EAAAA,KAAA,MAAAG,SAAgB8D,EAAEtD,MAATsD,EAAErD,GAAiB,OAGhC8C,EAAAA,EAAAA,MAAA,QAAMxD,UAAU,SAAQC,SAAA,EACtBH,EAAAA,EAAAA,KAAA,OAAKX,MAAM,KAAK6E,OAAO,KAAI/D,UAACH,EAAAA,EAAAA,KAAA,OAAKmE,UAAS,GAAAzE,OAAK0E,EAAAA,EAAG,aAC3B,QAD2CvD,EACjEc,EAAU0C,oBAAY,IAAAxD,OAAA,EAAtBA,EAAwByD,QAAQ,OAEnCZ,EAAAA,EAAAA,MAAA,QAAAvD,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKX,MAAM,KAAK6E,OAAO,KAAI/D,UAACH,EAAAA,EAAAA,KAAA,OAAKmE,UAAS,GAAAzE,OAAK0E,EAAAA,EAAG,iBACjD,IAAIG,KAAK5C,EAAU6C,gBAAgBC,qBAGxCzE,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gBAAeC,SAAEwB,EAAU+C,YACxChB,EAAAA,EAAAA,MAAA,MAAIxD,UAAU,eAAcC,SAAA,CACR,QADQW,EACzBa,EAAUgD,eAAO,IAAA7D,OAAA,EAAjBA,EAAmBkD,MAAM,EAAG,GAAG5D,KAAI,SAAC2C,GAAC,OACpC/C,EAAAA,EAAAA,KAAA,MAAAG,SAAgB4C,EAAEpC,MAAToC,EAAEnC,GAAiB,IAE7Be,EAAUgD,QAAQ9B,OAAS,GAAI7C,EAAAA,EAAAA,KAAA,MAAIE,UAAU,eAAcC,SAAC,iBAAoB,kBAMzFH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kBAIvB,E,UCoFA,EA1KiB,WACf,IAAMa,GAAWC,EAAAA,EAAAA,MACjBG,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CyD,EAAWvD,EAAA,GAAEwD,EAAcxD,EAAA,GAClCI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCsC,EAAMrC,EAAA,GAAEoD,EAASpD,EAAA,GACxBG,GAA4BT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCkD,EAAMjD,EAAA,GAAEkD,EAASlD,EAAA,GACxBmD,GAAgC7D,EAAAA,EAAAA,UAAS,IAAG8D,GAAA5D,EAAAA,EAAAA,GAAA2D,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtBjF,GAAMxB,EAAAA,EAAAA,QAAO,MACnB4G,GAAwCjE,EAAAA,EAAAA,UAAS,GAAEkE,GAAAhE,EAAAA,EAAAA,GAAA+D,EAAA,GAA5CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,IAErC5G,EAAAA,EAAAA,YAAU,WACT,IAAM+G,EAAoB,eAAAnH,GAAA4D,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAsD,EAAAC,EAAA,OAAAxD,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEF1B,GAAS6E,EAAAA,EAAAA,IAAeC,EAAAA,KAAM,KAAD,EAA9CH,EAAQnD,EAAAI,KACRgD,EAAiBD,EAAS9C,QAAQkD,QAAQhD,QAAO,SAAAzC,GAAC,OAAIA,EAAEG,WAAW,IACzEqE,EAAec,GAAgBpD,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAwD,GAAAxD,EAAA,SAK/BiB,QAAQwC,MAAM,mBAAkBzD,EAAAwD,IAAK,yBAAAxD,EAAAU,OAAA,GAAAb,EAAA,kBAExC,kBAXyB,OAAA9D,EAAA4E,MAAA,KAAAC,UAAA,KAapB8C,EAAW,eAAAC,GAAAhE,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAgE,IAAA,IAAAC,EAAA,OAAAjE,IAAAA,MAAA,SAAAkE,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,cAAA4D,EAAA7D,KAAA,EAAA6D,EAAA5D,KAAA,EAEE1B,GAASuF,EAAAA,EAAAA,OAAa,KAAD,EAAjCF,EAAGC,EAAA1D,KACTmC,EAAUsB,EAAIxD,QAAQmB,QAAOsC,EAAA5D,KAAA,gBAAA4D,EAAA7D,KAAA,EAAA6D,EAAAN,GAAAM,EAAA,SAE7B7C,QAAQC,IAAG4C,EAAAN,IAAG,yBAAAM,EAAApD,OAAA,GAAAkD,EAAA,kBAEjB,kBAPgB,OAAAD,EAAAhD,MAAA,KAAAC,UAAA,KAQXoD,EAAW,eAAAC,GAAAtE,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAsE,IAAA,IAAAL,EAAA,OAAAjE,IAAAA,MAAA,SAAAuE,GAAA,cAAAA,EAAAlE,KAAAkE,EAAAjE,MAAA,cAAAiE,EAAAlE,KAAA,EAAAkE,EAAAjE,KAAA,EAEE1B,GAAS4F,EAAAA,EAAAA,OAAiB,KAAD,EAArCP,EAAGM,EAAA/D,KACTqC,EAAUoB,EAAIxD,QAAQkD,SAAQY,EAAAjE,KAAA,gBAAAiE,EAAAlE,KAAA,EAAAkE,EAAAX,GAAAW,EAAA,SAE9BlD,QAAQC,IAAGiD,EAAAX,IAAG,yBAAAW,EAAAzD,OAAA,GAAAwD,EAAA,kBAEjB,kBAPgB,OAAAD,EAAAtD,MAAA,KAAAC,UAAA,KAQXyD,EAAa,eAAAC,GAAA3E,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAA2E,IAAA,IAAApB,EAAAqB,EAAA,OAAA5E,IAAAA,MAAA,SAAA6E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,cAAAuE,EAAAvE,KAAA,EACG1B,GAASkG,EAAAA,EAAAA,OAAS,OAAnCvB,EAAQsB,EAAArE,KACRoE,EAASrB,EAAS9C,QAAQkD,QAC7BhD,QAAO,SAAAzC,GAAC,OAAIA,EAAEG,aAAeH,EAAE2C,aAAa,IAC5CkE,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE/C,aAAe8C,EAAE9C,YAAY,IAC9CL,MAAM,EAAG,GAEZoB,EAAY2B,GAAQ,wBAAAC,EAAA/D,OAAA,GAAA6D,EAAA,KACrB,kBARkB,OAAAD,EAAA3D,MAAA,KAAAC,UAAA,KASfkE,EAAqB,WACrB,IAAMhI,EAAQC,OAAOC,WACrBiG,EAAgB7F,KAAK2H,MAAMjI,GAC7B,EAQA,OANAgI,IACA/H,OAAOQ,iBAAiB,SAAUuH,GAClC5B,IACAQ,IACAM,IACAK,IACO,kBAAMtH,OAAOS,oBAAoB,SAAUsH,EAAoB,CAC1E,GAAG,CAACtG,IAEJ,IAAMwG,EAAS,SAACC,GACPvH,EAAIpB,SACToB,EAAIpB,QAAQ4I,SAAS,CACnBrI,KAAc,SAARoI,GAAkBjC,EAAeA,EACvCmC,SAAU,UAEd,EAEA,OACEhE,EAAAA,EAAAA,MAAA,WAASxD,UAAU,cAAaC,SAAA,EAC7BH,EAAAA,EAAAA,KAAC2H,EAAU,KACZjE,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,gBAAeC,SAAA,EAC5BuD,EAAAA,EAAAA,MAAA,OAAAvD,SAAA,EACEH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,eAAcC,SAAC,uCAC7BH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,cAAaC,SAAC,uGAE7BH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,aAAYC,SACvB4D,EACA3D,KAAI,SAAAwH,GAAG,OACNlE,EAAAA,EAAAA,MAAA,MAAAvD,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKX,MAAM,KAAK6E,OAAO,KAAI/D,UAACH,EAAAA,EAAAA,KAAA,OAAKmE,UAAS,GAAAzE,OAAK0E,EAAAA,EAAG,KAAA1E,OAAIkI,EAAIjH,WAC1D+C,EAAAA,EAAAA,MAAA,QAAAvD,SAAA,CACGyH,EAAIjH,MACLX,EAAAA,EAAAA,KAAC6H,EAAAA,GAAI,CAACC,GAAE,WAAApI,OAAakI,EAAIjH,KAAI,KAAAjB,OAAIkI,EAAIhH,IAAKT,SAAE,mBAJvCyH,EAAIhH,GAMR,UAKX8C,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,QAAOC,SAAC,wBACtBuD,EAAAA,EAAAA,MAAA,KAAGxD,UAAU,OAAMC,SAAA,CAAC,kEAA8DH,EAAAA,EAAAA,KAAA,SAAS,qDAG3F0D,EAAAA,EAAAA,MAAA,MAAIxD,UAAU,cAAaC,SAAA,EACzBuD,EAAAA,EAAAA,MAAA,MAAAvD,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKX,MAAM,KAAK6E,OAAO,KAAI/D,UAACH,EAAAA,EAAAA,KAAA,OAAKmE,UAAS,GAAAzE,OAAK0E,EAAAA,EAAG,WAAc,SAGlEV,EAAAA,EAAAA,MAAA,MAAAvD,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKX,MAAM,KAAK6E,OAAO,KAAI/D,UAACH,EAAAA,EAAAA,KAAA,OAAKmE,UAAS,GAAAzE,OAAK0E,EAAAA,EAAG,eAAkB,uBAGtEV,EAAAA,EAAAA,MAAA,MAAAvD,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKX,MAAM,KAAK6E,OAAO,KAAI/D,UAACH,EAAAA,EAAAA,KAAA,OAAKmE,UAAS,GAAAzE,OAAK0E,EAAAA,EAAG,cAAiB,2BAMzEV,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,4BAA2BC,SAAA,EACxCH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,8BACJuD,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,UAASC,SAAA,EACtBH,EAAAA,EAAAA,KAAA,UAAQ2D,KAAK,SAASC,QAAS,kBAAM2D,EAAO,OAAO,EAACpH,SAAC,YAGrDH,EAAAA,EAAAA,KAAA,UAAQ2D,KAAK,SAASC,QAAS,kBAAM2D,EAAO,QAAQ,EAACpH,SAAC,eAIxDH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,aAAaD,IAAKA,EAAIE,SACjC4E,EAAO3E,KAAI,SAAA+G,GAAC,OACXzD,EAAAA,EAAAA,MAAA,MAAAvD,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKM,IAAK6G,EAAEY,aAAexH,EAAAA,GAAY4G,EAAEY,aAAeC,EAAOvH,IAAK0G,EAAExG,QACtEX,EAAAA,EAAAA,KAAA,MAAAG,SAAKgH,EAAExG,QACPX,EAAAA,EAAAA,KAAA,KAAAG,SAAIgH,EAAEc,yBAHCd,EAAEvG,GAIN,UAKX8C,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,kBAAiBC,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,4CACJH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,eAAcC,SACzBgF,EACE/E,KAAI,SAAA8H,GAAC,OACJxE,EAAAA,EAAAA,MAAA,MAAexD,UAAU,cAAaC,SAAA,EACpCuD,EAAAA,EAAAA,MAAA,OAAKyE,QAAQ,cAAcjI,UAAU,WAAUC,SAAA,EAC7CH,EAAAA,EAAAA,KAAA,QAAAG,UACEH,EAAAA,EAAAA,KAAA,QAAMY,GAAE,WAAAlB,OAAawI,EAAEtH,IAAMwH,EAAE,wCAEjCpI,EAAAA,EAAAA,KAAA,QAAMqI,KAAK,QAAQC,SAAS,KAAKC,WAAW,OAAMpI,UAChDH,EAAAA,EAAAA,KAAA,YAAUwI,KAAI,YAAA9I,OAAcwI,EAAEtH,IAAM6H,YAAY,MAAMC,WAAW,SAAQvI,SACtE+H,EAAExH,OAASwH,EAAEvH,aAIpBX,EAAAA,EAAAA,KAAA,OACEM,IAAKC,EAAAA,GAAY2H,EAAE1H,aAAe0H,EAAElF,cAEpCvC,IAAKyH,EAAExH,OAASwH,EAAEvH,SAdbuH,EAAEtH,GAgBN,UAMb8C,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,mBAAkBC,SAAA,EAC/BH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,oBACJH,EAAAA,EAAAA,KAAC2I,EAAY,CAAEpK,OAAQqG,SAK/B,C,yIChHA,EA7DiB,SAAEgE,GACjB,IAAM7H,GAAWC,EAAAA,EAAAA,MACjBG,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArC0H,EAAQxH,EAAA,GAAEyH,EAAWzH,EAAA,GAC5BI,GAAwBL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BsH,EAAIrH,EAAA,GAAEsH,EAAOtH,EAAA,GACduH,GAAWxK,EAAAA,EAAAA,QAAO,MA6BxB,IA3BAC,EAAAA,EAAAA,YAAU,WACR,IAAMwK,EAAY,eAAA5K,GAAA4D,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAgE,EAAA+C,EAAA,OAAAhH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEC1B,GAASqI,EAAAA,EAAAA,IAAW,CAACtF,KAAM8E,EAAQ9E,KAAMlD,GAAIgI,EAAQhI,GAAGA,MAAM,KAAD,EAAzEwF,EAAG7D,EAAAI,KAEHwG,EAAW/C,EAAIxD,QAAQkD,QAAQhD,QACnC,SAACuG,GAAC,MAAgB,YAAXA,EAAEC,MAAiC,WAAXD,EAAE1F,IAAiB,IAEpDmF,EAAYK,GAAU5G,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAwD,GAAAxD,EAAA,SAEtBiB,QAAQwC,MAAM,4CAAmCzD,EAAAwD,IAAK,yBAAAxD,EAAAU,OAAA,GAAAb,EAAA,kBAEzD,kBAXiB,OAAA9D,EAAA4E,MAAA,KAAAC,UAAA,KAadyF,GAASM,IAEb,IAAMK,EAAqB,SAACC,GACtBP,EAASpK,UAAYoK,EAASpK,QAAQ4K,SAASD,EAAEE,SACnDV,GAAQ,EAEZ,EAIA,OAHID,GACFY,SAAS7J,iBAAiB,YAAayJ,GAElC,kBAAMI,SAAS5J,oBAAoB,YAAawJ,EAAoB,CAC7E,GAAG,CAACxI,EAAU6H,EAASG,KAElBF,EAAShG,OAAQ,OAAO,KAI7B,OACEa,EAAAA,EAAAA,MAAA,OAAKxD,UAAU,WAAUC,SAAA,EACtBH,EAAAA,EAAAA,KAAA,UAAQ4D,QAJI,WAAH,OAASoF,GAASD,EAAK,EAIHpF,KAAK,SAAQxD,SAAC,gBAC1C4I,GACD/I,EAAAA,EAAAA,KAAA4J,EAAAA,SAAA,CAAAzJ,SACC0I,EAASzI,KAAI,SAACyJ,GAAO,OACpBnG,EAAAA,EAAAA,MAAA,OAAKzD,IAAKgJ,EAA2B/I,UAAU,eAAcC,SAAA,EAC3DH,EAAAA,EAAAA,KAAA,MAAAG,SAAK0J,EAAQlJ,QACbX,EAAAA,EAAAA,KAAA,UACEX,MAAM,MACN6E,OAAO,MACP5D,IAAG,iCAAAZ,OAAmCmK,EAAQC,KAC9CpJ,MAAOmJ,EAAQlJ,KACfoJ,iBAAe,MAPMF,EAAQjJ,GAS3B,MAGN,OAIT,C","sources":["components/SphereScroll/SphereScroll.jsx","components/MainPoster/MainPoster.jsx","components/MainPage/MainPage.jsx","components/Trailer/Trailer.jsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { IMAGE_URL } from \"../../redux/movies/getAPI\";\nimport \"./SphereScroll.css\"\n\nconst SphereScroll = ({ movies }) => {\n  const listRef = useRef();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const list = listRef.current;\n      if (!list) return;\n\n      const items = list.querySelectorAll(\"li\");\n\n      items.forEach((item) => {\n        const rect = item.getBoundingClientRect();\n        const itemCenter = rect.left + rect.width / 2;\n        const offset = (itemCenter - window.innerWidth / 2) / window.innerWidth;\n\n        item.style.transform = `\n          rotateY(${offset * 40}deg)\n          scale(${1 - Math.abs(offset) * 0.3})\n        `;\n        item.style.opacity = `${1 - Math.abs(offset) * 0.6}`;\n      });\n    };\n\n    const list = listRef.current;\n    list.addEventListener(\"scroll\", handleScroll);\n    handleScroll();\n\n    return () => list.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return (\n    <ul ref={listRef} className=\"movieList\">\n      {movies.map((m) => (\n        <li key={m.id}>\n          <img\n            className=\"imgCover\"\n            src={IMAGE_URL + m.poster_path}\n            alt={m.title || m.name}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default SphereScroll;\n","import { useEffect, useState} from \"react\";\nimport {  newSeriesFetch } from \"../../redux/series/seriesApi\";\nimport { useDispatch } from \"react-redux\";\n//import star from '../../components/Images/star.png';\n//import calendar from '../../components/Images/calendar.png';\nimport { useNavigate } from \"react-router-dom\";\nimport Trailers from \"components/Trailer/Trailer\";\nimport url from '../Images/icons.svg';\nimport \"./MainPoster.css\";\n\nconst MainPoster = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [main, setMain] = useState([]);\n  const [highlight, setHighlight] = useState(null);\n  const [index, setIndex] = useState(0);\n\n \n  useEffect(() => {\n    const fetchSeries = async () => {\n      const ser = await dispatch(newSeriesFetch());\n      if (ser?.payload?.length) {\n        setMain(ser.payload.filter(s =>s.backdrop_path));\n        setHighlight(ser.payload[0]);\n      }\n    };\n    fetchSeries();\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!main.length) return;\n\n    const interval = setInterval(() => {\n      setIndex((prev) => {\n        const newIndex = (prev + 1) % main.length;\n        setHighlight(main[newIndex]);\n        return newIndex;\n      });\n    }, 8000);\n\n    return () => clearInterval(interval);\n  }, [main]);\n\n  console.log(index)\n\n  return (\n    <section className=\"mainPosterSection\">\n      {highlight ? (\n        <div className=\"imageWrapper\">\n          <img\n            className=\"mainImgCover\"\n            src={\n              \"https://image.tmdb.org/t/p/w1920_and_h800_multi_faces\" +\n              highlight.backdrop_path\n            }\n            alt={highlight.name}\n          />\n          <div className=\"movieInfos\">\n            <div className=\"movieButtons\">\n              <button type=\"button\" onClick={() => navigate(`/login`)}>\n                Watch now\n              </button>\n              <Trailers id={highlight} show={\"tv\"}/>\n            </div>\n            <div className=\"infos\">\n              <h1 className=\"movieTitle\">{highlight.name}</h1>\n              <div className=\"gen_rating_time\">\n                <ul className=\"movieGen\">\n                  {highlight.genres.slice(0, 2).map(g => (\n                    <li key={g.id}>{g.name}</li>\n                  ))}\n                </ul>\n                <span className=\"rating\">\n                  <svg width=\"14\" height=\"14\"><use xlinkHref={`${url}#star`}/></svg>\n                  {highlight.vote_average?.toFixed(1)}\n                </span>\n                <span>\n                  <svg width=\"20\" height=\"20\"><use xlinkHref={`${url}#calendar`}/></svg>\n                  {new Date(highlight.first_air_date).getFullYear()}\n                </span>\n              </div>\n              <p className=\"movieOverview\">{highlight.overview}</p>\n              <ul className=\"movieSeasons\">\n                {highlight.seasons?.slice(0, 3).map((s) => (\n                  <li key={s.id}>{s.name}</li>\n                ))}\n                {highlight.seasons.length > 3 ? <li className=\"moSeasonsBtn\">More Seasons</li> : null}\n              </ul>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"imageWrapper\"></div>\n      )}\n    </section>\n  );\n};\n\nexport default MainPoster;","import { useEffect, useState, useRef } from \"react\";\nimport { getAll, getTrendingAll, day, getGenres, popularActors, IMAGE_URL } from \"../../redux/movies/getAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport SphereScroll from \"components/SphereScroll/SphereScroll\";\nimport url from '../Images/icons.svg';\nimport MainPoster from \"components/MainPoster/MainPoster\";\nimport noImg from '../Images/no_image.jpg';\nimport \"./MainPage.css\";\n\nconst MainPage = () => {\n  const dispatch = useDispatch();\n  const [recentMovie, setRecentMovie] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [actors, setActors] = useState([]);\n  const [trending, setTrending] = useState([]);\n  const ref = useRef(null);\n  const [scrollAmount, setScrollAmount] = useState(0);\n\n useEffect(() => {\n  const fetchMostRecentMovie = async () => {\n    try {\n      const response = await dispatch(getTrendingAll(day));\n      const moviesFiltered = response.payload.results.filter(m => m.poster_path);\n      setRecentMovie(moviesFiltered);\n\n     \n      \n    } catch (e) {\n      console.error(\"Eroare la fetch:\", e);\n    }\n  };\n\n  const fetchGenres = async () => {\n    try{\n      const res = await dispatch(getGenres());\n      setGenres(res.payload.genres)\n    } catch(e) {\n      console.log(e)\n    }\n  }\n  const fetchActors = async () => {\n    try{\n      const res = await dispatch(popularActors());\n      setActors(res.payload.results)\n    } catch(e) {\n      console.log(e)\n    }\n  }\n  const fetchTrending = async () => {\n    const response = await dispatch(getAll())\n    const sorted = response.payload.results\n      .filter(m => m.poster_path || m.backdrop_path)\n      .sort((a, b) => b.vote_average - a.vote_average)\n      .slice(0, 3);\n    \n    setTrending(sorted);\n  }\nconst updateScrollAmount = () => {\n      const width = window.innerWidth;\n      setScrollAmount(Math.floor(width));\n    };\n\n    updateScrollAmount();\n    window.addEventListener(\"resize\", updateScrollAmount);\n    fetchMostRecentMovie();\n    fetchGenres();\n    fetchActors();\n    fetchTrending();\n    return () => window.removeEventListener(\"resize\", updateScrollAmount);\n}, [dispatch]);\n\nconst scroll = (dir) => {\n    if (!ref.current) return;\n    ref.current.scrollBy({\n      left: dir === \"left\" ? -scrollAmount : scrollAmount,\n      behavior: \"smooth\",\n    });\n  };\n\n  return (\n    <section className=\"mainSection\">\n       <MainPoster/>\n      <div className=\"genresSection\">\n        <div>\n          <h2 className=\"sectionTitle\">choose the type of film you liked</h2>\n          <p className=\"sectionText\">We present many films from various main categories, let's chooose and search film of you liked</p>\n        </div>\n        <ul className=\"genresList\">\n          {genres\n          .map(gen => (\n            <li key={gen.id}>\n              <svg width=\"29\" height=\"32\"><use xlinkHref={`${url}#${gen.name}`}/></svg>\n              <span>\n                {gen.name}\n                <Link to={`/genres/${gen.name}/${gen.id}`} >View more</Link>\n              </span>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"devicesSection\">\n        <h2 className=\"title\">Any time, Anywhere</h2>\n        <p className=\"text\">Watch your favorite movie or TV series on all types of devices<br></br>\n          Stream and enjoy your favorites on your device\n        </p>\n        <ul className=\"devicesList\">\n          <li>\n            <svg width=\"60\" height=\"60\"><use xlinkHref={`${url}#TV`}/></svg>\n            TV\n          </li>\n          <li>\n            <svg width=\"60\" height=\"60\"><use xlinkHref={`${url}#laptop`}/></svg>\n            Laptop & Desktop\n          </li>\n          <li>\n            <svg width=\"60\" height=\"60\"><use xlinkHref={`${url}#mobil`}/></svg>\n            Tablet & Mobil\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"popularCelebritiesSection\">\n        <h2>Most popular celebrities</h2>\n        <div className=\"moveBtn\">\n          <button type=\"button\" onClick={() => scroll(\"left\")}>\n            &lsaquo;\n          </button>\n          <button type=\"button\" onClick={() => scroll(\"right\")}>\n            &rsaquo;\n          </button>\n        </div>\n        <ul className=\"actorsList\" ref={ref}>\n          {actors.map(a => (\n            <li key={a.id}>\n              <img src={a.profile_path ? IMAGE_URL + a.profile_path : noImg} alt={a.name}/>\n              <h3>{a.name}</h3>\n              <p>{a.known_for_department}</p>\n            </li>\n          ))}\n        </ul>\n      </div>    \n\n      <div className=\"trendingSection\">\n        <h2>Top 3 the most wanted movies this week</h2>\n        <ul className=\"trendingList\">\n          {trending \n            .map(t => (\n              <li key={t.id} className=\"recentMovie\">\n                <svg viewBox=\"0 0 300 150\" className=\"titleArc\">\n                  <defs>\n                    <path id={`arcPath-${t.id}`} d=\"M 20 130 A 130 130 0 0 1 280 130\" />\n                  </defs>\n                  <text fill=\"white\" fontSize=\"16\" fontWeight=\"bold\">\n                    <textPath href={`#arcPath-${t.id}`} startOffset=\"50%\" textAnchor=\"middle\">\n                      {t.title || t.name}\n                    </textPath>\n                  </text>\n                </svg>\n                <img\n                  src={IMAGE_URL + t.poster_path || t.backdrop_path\n                  }\n                  alt={t.title || t.name}\n                />\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n\n      <div className=\"isPopularSection\">\n        <h2>What's Popular</h2> \n        <SphereScroll  movies={recentMovie}/>\n      </div>\n\n    </section>\n  );\n};\n\nexport default MainPage;","import { useEffect, useState, useRef, } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getTrailer } from \"../../redux/movies/getAPI\";\nimport './Trailer.css';\n\nconst Trailers = ( movieId ) => {\n  const dispatch = useDispatch();\n  const [trailers, setTrailers] = useState([]);\n  const [open, setOpen] = useState(null);\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    const loadTrailers = async () => {\n      try {\n        const res = await dispatch(getTrailer({show: movieId.show, id: movieId.id.id}));\n        \n        const filtered = res.payload.results.filter(\n          (v) => v.site === \"YouTube\" && v.type === \"Teaser\"\n        );\n        setTrailers(filtered);\n      } catch (e) {\n        console.error(\"Eroare la încărcarea trailerelor:\", e);\n      }\n    };\n\n    if (movieId) loadTrailers();\n\n    const handleClickOutside = (e) => {\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\n        setOpen(false);\n      }\n    };\n    if (open) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [dispatch, movieId, open]);\n\n  if (!trailers.length) return null;\n\nconst handleOpen = () => setOpen(!open)\n\n  return (\n    <div className=\"trailers\">\n       <button onClick={handleOpen} type=\"button\">Watch Later</button>\n       {open ? \n       <>\n       {trailers.map((trailer) => (\n         <div ref={modalRef} key={trailer.id} className=\"trailer-item\">\n           <h4>{trailer.name}</h4>\n           <iframe\n             width=\"960\"\n             height=\"509\"\n             src={`https://www.youtube.com/embed/${trailer.key}`}\n             title={trailer.name}\n             allowFullScreen\n           ></iframe>\n         </div>\n       ))}\n       </>\n       : null}\n        \n    </div>\n  );\n};\n\nexport default Trailers;\n"],"names":["_ref","movies","listRef","useRef","useEffect","handleScroll","list","current","querySelectorAll","forEach","item","rect","getBoundingClientRect","offset","left","width","window","innerWidth","style","transform","concat","Math","abs","opacity","addEventListener","removeEventListener","_jsx","ref","className","children","map","m","src","IMAGE_URL","poster_path","alt","title","name","id","_highlight$vote_avera","_highlight$seasons","dispatch","useDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","main","setMain","_useState3","_useState4","highlight","setHighlight","_useState5","_useState6","index","setIndex","fetchSeries","_asyncToGenerator","_regeneratorRuntime","_callee","_ser$payload","ser","_context","prev","next","newSeriesFetch","sent","payload","length","filter","s","backdrop_path","stop","apply","arguments","interval","setInterval","newIndex","clearInterval","console","log","_jsxs","type","onClick","Trailers","show","genres","slice","g","height","xlinkHref","url","vote_average","toFixed","Date","first_air_date","getFullYear","overview","seasons","recentMovie","setRecentMovie","setGenres","actors","setActors","_useState7","_useState8","trending","setTrending","_useState9","_useState10","scrollAmount","setScrollAmount","fetchMostRecentMovie","response","moviesFiltered","getTrendingAll","day","results","t0","error","fetchGenres","_ref2","_callee2","res","_context2","getGenres","fetchActors","_ref3","_callee3","_context3","popularActors","fetchTrending","_ref4","_callee4","sorted","_context4","getAll","sort","a","b","updateScrollAmount","floor","scroll","dir","scrollBy","behavior","MainPoster","gen","Link","to","profile_path","noImg","known_for_department","t","viewBox","d","fill","fontSize","fontWeight","href","startOffset","textAnchor","SphereScroll","movieId","trailers","setTrailers","open","setOpen","modalRef","loadTrailers","filtered","getTrailer","v","site","handleClickOutside","e","contains","target","document","_Fragment","trailer","key","allowFullScreen"],"sourceRoot":""}