{"version":3,"file":"static/js/244.97485c69.chunk.js","mappings":"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","sources":["components/SphereScroll/SphereScroll.jsx","components/Trailer/Trailer.jsx","components/pages/MainPAge/MainPage.jsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { IMAGE_URL } from \"../../redux/movies/getAPI\";\nimport \"./SphereScroll.css\"\n\nconst SphereScroll = ({ movies }) => {\n  const listRef = useRef();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const list = listRef.current;\n      if (!list) return;\n\n      const items = list.querySelectorAll(\"li\");\n\n      items.forEach((item) => {\n        const rect = item.getBoundingClientRect();\n        const itemCenter = rect.left + rect.width / 2;\n        const offset = (itemCenter - window.innerWidth / 2) / window.innerWidth;\n\n        item.style.transform = `\n          rotateY(${offset * 40}deg)\n          scale(${1 - Math.abs(offset) * 0.3})\n        `;\n        item.style.opacity = `${1 - Math.abs(offset) * 0.6}`;\n      });\n    };\n\n    const list = listRef.current;\n    list.addEventListener(\"scroll\", handleScroll);\n    handleScroll();\n\n    return () => list.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return (\n    <ul ref={listRef} className=\"movieList\">\n      {movies.map((m) => (\n        <li key={m.id}>\n          <img\n            className=\"imgCover\"\n            src={IMAGE_URL + m.poster_path}\n            alt={m.title || m.name}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default SphereScroll;\n","import { useEffect, useState, useRef, } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getTrailer } from \"../../redux/movies/getAPI\";\nimport './Trailer.css';\n\nconst Trailers = ( movieId ) => {\n  const dispatch = useDispatch();\n  const [trailers, setTrailers] = useState([]);\n  const [open, setOpen] = useState(null);\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    const loadTrailers = async () => {\n      try {\n        const res = await dispatch(getTrailer({show: \"tv\", id: movieId.id.id}));\n        \n        // filtrăm doar trailerele oficiale sau YouTube\n        const filtered = res.payload.results.filter(\n          (v) => v.site === \"YouTube\" && v.type === \"Teaser\"\n        );\n        setTrailers(filtered);\n      } catch (e) {\n        console.error(\"Eroare la încărcarea trailerelor:\", e);\n      }\n    };\n\n    if (movieId) loadTrailers();\n\n    const handleClickOutside = (e) => {\n      if (modalRef.current && !modalRef.current.contains(e.target)) {\n        setOpen(false);\n      }\n    };\n    if (open) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [dispatch, movieId, open]);\n\n  if (!trailers.length) return null;\n\nconst handleOpen = () => setOpen(!open)\n\n\n\n\n\n  return (\n    <div className=\"trailers\">\n       <button onClick={handleOpen} type=\"button\">Watch Later</button>\n       {open ? \n       <>\n       {trailers.map((trailer) => (\n         <div ref={modalRef} key={trailer.id} className=\"trailer-item\">\n           <h4>{trailer.name}</h4>\n           <iframe\n             width=\"960\"\n             height=\"509\"\n             src={`https://www.youtube.com/embed/${trailer.key}`}\n             title={trailer.name}\n             allowFullScreen\n           ></iframe>\n         </div>\n       ))}\n       </>\n       : null}\n        \n    </div>\n  );\n};\n\nexport default Trailers;\n","import { useEffect, useState } from \"react\";\nimport { getMostPopular, day, getGenres, popularActors, IMAGE_URL } from \"../../../redux/movies/getAPI\";\nimport { seriesDetails } from \"../../../redux/series/seriesApi\";\nimport { useDispatch } from \"react-redux\";\nimport SphereScroll from \"components/SphereScroll/SphereScroll\";\nimport { useNavigate } from \"react-router-dom\";\nimport star from '../../Images/star.png';\nimport calendar from '../../Images/calendar.png';\nimport Trailers from \"components/Trailer/Trailer\";\nimport \"./MainPage.css\";\n\n\nconst MainPage = () => {\n  const dispatch = useDispatch();\n  const [recentMovie, setRecentMovie] = useState([]);\n  const [mainImag, setMainImag] = useState();\n  const [genres, setGenres] = useState([]);\n  const [actors, setActors] = useState([])\n  const navigate = useNavigate();\n\n useEffect(() => {\n  const fetchMostRecentMovie = async () => {\n    try {\n      const response = await dispatch(getMostPopular(day));\n      const moviesFiltered = response.payload.results.filter(m => m.poster_path);\n        setRecentMovie(moviesFiltered);\n\n      const res = await dispatch(seriesDetails(\"194766\"));\n      setMainImag(res.payload)\n      \n    } catch (e) {\n      console.error(\"Eroare la fetch:\", e);\n    }\n  };\n\n  const fetchGenres = async () => {\n    try{\n      const res = await dispatch(getGenres());\n      setGenres(res.payload.genres)\n    } catch(e) {\n      console.log(e)\n    }\n  }\n\n  const fetchActors = async () => {\n    try{\n      const res = await dispatch(popularActors());\n      setActors(res.payload.results)\n    } catch(e) {\n      console.log(e)\n    }\n  }\n\n  fetchMostRecentMovie();\n  fetchGenres();\n  fetchActors();\n}, [dispatch]);\n\n\n  return (\n    <section className=\"mainSection\">\n\n    {mainImag ? (\n      <div className=\"imageWrapper\">\n          <img className=\"mainImgCover\"\n              src={\"https://image.tmdb.org/t/p/w1920_and_h800_multi_faces\" + mainImag.backdrop_path}\n              alt={mainImag.name}\n          />\n          <div className=\"movieInfos\">\n            <div className=\"movieButtons\">\n              <button type=\"button\" onClick={() => navigate(`/login`)}>Watch now</button>\n              <Trailers id={mainImag}/>\n            </div>\n            <div>\n              <h1 className=\"movieTitle\">{mainImag.name}</h1>\n              <div className=\"gen_rating_time\">\n                <p className=\"movieGen\">{mainImag.genres[0].name}</p>\n                <span className=\"rating\">\n                  <img src={star} alt=\"star\"/>\n                  {mainImag.vote_average.toFixed(1)}\n                </span>\n                <span>\n                  <img src={calendar} alt=\"calendar\"/>\n                  {new Date(mainImag.first_air_date).getFullYear()}\n                </span>\n              </div>\n              <p className=\"movieOverview\">{mainImag.overview}</p>\n              <ul className=\"movieSeasons\">\n                {mainImag.seasons.map(s => (\n                  <li key={s.id}>\n                    {s.name}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            \n          </div>\n        </div>\n    ) : (<p>no</p>)}\n    <ul className=\"genresList\">\n      {genres.map(gen => (\n        <li key={gen.id}>{gen.name}</li>\n      ))}\n    </ul>\n      <h2>Popular People</h2>\n    <ul className=\"actorsList\">\n      {actors.map(a => (\n        <li key={a.id}>\n          <img src={IMAGE_URL + a.profile_path}\n          alt={a.name}\n          />\n          {a.name}\n          </li>\n        \n      ))}\n    </ul>\n\n    <h2>What's Popular</h2> \n    <SphereScroll  movies={recentMovie}/>\n\n      \n    </section>\n  );\n};\n\nexport default MainPage;"],"names":["_ref","movies","listRef","useRef","useEffect","handleScroll","list","current","querySelectorAll","forEach","item","rect","getBoundingClientRect","offset","left","width","window","innerWidth","style","transform","concat","Math","abs","opacity","addEventListener","removeEventListener","_jsx","ref","className","children","map","m","src","IMAGE_URL","poster_path","alt","title","name","id","movieId","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","trailers","setTrailers","_useState3","_useState4","open","setOpen","modalRef","loadTrailers","_asyncToGenerator","_regeneratorRuntime","_callee","res","filtered","_context","prev","next","getTrailer","show","sent","payload","results","filter","v","site","type","t0","console","error","stop","apply","arguments","handleClickOutside","e","contains","target","document","length","_jsxs","onClick","_Fragment","trailer","height","key","allowFullScreen","recentMovie","setRecentMovie","mainImag","setMainImag","_useState5","_useState6","genres","setGenres","_useState7","_useState8","actors","setActors","navigate","useNavigate","fetchMostRecentMovie","response","moviesFiltered","getMostPopular","day","seriesDetails","fetchGenres","_ref2","_callee2","_context2","getGenres","log","fetchActors","_ref3","_callee3","_context3","popularActors","backdrop_path","Trailers","star","vote_average","toFixed","Date","first_air_date","getFullYear","overview","seasons","s","gen","a","profile_path","SphereScroll"],"sourceRoot":""}